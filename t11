clsScheme.cls
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsScheme"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Public Function sub_LoadConfig() As Boolean
           
On Error GoTo errHandler

     G_SchemeName = getStringFromINI(G_SchemeID, "SchemeName", CurrentProject.path & "\GenericMain.ini")
     
     If G_SchemeName <> "" Then
            
            G_SchemeName = getStringFromINI(G_SchemeID, "SchemeName", CurrentProject.path & "\GenericMain.ini")
            
            G_SchemeVersion = getStringFromINI(G_SchemeID, "Version", CurrentProject.path & "\GenericMain.ini")
            
            G_TempPath = getStringFromINI(G_SchemeID, "TempPath", CurrentProject.path & "\GenericMain.ini")
            
            configStr = getStringFromINI(G_SchemeID, "isMultiUser", CurrentProject.path & "\GenericMain.ini")
            
                If configStr = "Y" Then
                    isMultiUser = True
                Else
                    isMultiUser = False
                End If
            
            lockTimeOutStr = getStringFromINI(G_SchemeID, "lockTimeOut", CurrentProject.path & "\GenericMain.ini")
            
                If lockTimeOutStr = "" Then
                    lockTimeOut = 3600
                Else
                    lockTimeOut = CDbl(lockTimeOutStr)
                End If
            
            configStr = getStringFromINI(G_SchemeID, "isTransaction", CurrentProject.path & "\GenericMain.ini")

                If configStr = "Y" Then
                    isTransaction = True
                Else
                    isTransaction = False
                End If
                        
            G_HistoryDisplay = getStringFromINI(G_SchemeID, "historyDisplay", CurrentProject.path & "\GenericMain.ini")
            
                If G_HistoryDisplay = "" Then
                    G_HistoryDisplay = 100
                End If
            
            G_DBPATH = getStringFromINI(G_SchemeID, "DBDatabase", CurrentProject.path & "\GenericMain.ini")
            G_DBNAME = getStringFromINI(G_SchemeID, "DBName", CurrentProject.path & "\GenericMain.ini")
            G_DBPWD = Fn_DeCrypt(getStringFromINI(G_SchemeID, "password", CurrentProject.path & "\GenericMain.ini"))
            G_USERID = G_USER.Userid
            G_USERNAME = Replace(G_USER.UserName, "'", "''")
            G_RepositoryPath = getStringFromINI(G_SchemeID, "RepositoryPath", CurrentProject.path & "\GenericMain.ini")
            G_TemplatePath = getStringFromINI(G_SchemeID, "Template", CurrentProject.path & "\GenericMain.ini")
            G_TemplateFolder = getStringFromINI(G_SchemeID, "TemplateFolder", CurrentProject.path & "\GenericMain.ini")
            
            configStr = getStringFromINI(G_SchemeID, "isLocalDB", CurrentProject.path & "\GenericMain.ini")
            
                If configStr = "N" Then
                    G_DB.DataFile = G_DBPATH & G_DBNAME
                     G_DB.Password = G_DBPWD
                    isLocalDB = False
                Else
                    FileCopy G_DBPATH & G_DBNAME, G_TempPath & G_DBNAME
                    G_DB.DataFile = G_TempPath & G_DBNAME
                    G_DB.Password = G_DBPWD
                    isLocalDB = True
                End If
            
    Else
        MsgBox ("No Scheme ID can be found - " & G_SchemeID)
        sub_LoadConfig = False
        Exit Function
    End If
        
    G_DB.Connect
    G_DB.GetRecordset "select * from [_configuration]", gRS_Config
   
    CreateFolder (G_RepositoryPath)
    CreateFolder (G_RepositoryPath & G_SchemeID)
    CreateFolder (G_RepositoryPath & G_SchemeID & "\Import\")
    CreateFolder (G_RepositoryPath & G_SchemeID & "\Export\")
    
    sub_LoadConfig = True

finally:
    
    Exit Function
    
errHandler:
    MsgBox ("Cannot Load Config Setup for Scheme ID - " & G_SchemeID & " vbNewLine " & Err.Description)
    sub_LoadConfig = False
    GoTo finally
 
End Function


