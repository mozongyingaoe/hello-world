_Workflow_Report.bas
Attribute VB_Name = "_Workflow_Report"
Option Compare Database
Option Explicit

Public Function Workflow_Report_PostComboBoxChange() As Boolean
    
    Dim mRS_Logic_Config As Recordset
    
On Error GoTo processLogicError
    
    G_DB.GetRecordset "Select * from [Workflow_Logic] where [processType] = 'R' and [subProcess] = '" & mCurrentSubProcess & "' and [SourceFileID] = 'PostComboBoxChange' order by [SEQ]", mRS_Logic_Config

    Do Until mRS_Logic_Config.EOF
        
        If processLogicType(mRS_Logic_Config) = False Then
            GoTo processLogicError
        End If
        
        mRS_Logic_Config.MoveNext
    Loop

    Workflow_Report_PostComboBoxChange = True

finally:

    G_DB.ResetRecordset mRS_Logic_Config
    
    Exit Function
    
processLogicError:

    Workflow_Report_PostComboBoxChange = False
    GoTo finally
    
End Function

Public Function Workflow_Report_ExecuteTask() As Boolean
    
    Dim mRS_Logic_Config As Recordset
    
On Error GoTo processLogicError
    
    G_DB.GetRecordset "Select * from [Workflow_Logic] where [processType] = 'R' and [subProcess] = '" & mCurrentSubProcess & "' and [SourceFileID] = 'PostLogic' order by [SEQ]", mRS_Logic_Config

    Do Until mRS_Logic_Config.EOF
        
        If processLogicType(mRS_Logic_Config) = False Then
            GoTo processLogicError
        End If
        
        mRS_Logic_Config.MoveNext
    Loop

    Workflow_Report_ExecuteTask = True

finally:

    G_DB.ResetRecordset mRS_Logic_Config
    
    Exit Function
    
processLogicError:

    Workflow_Report_ExecuteTask = False
    GoTo finally
    
End Function


Public Function processLogicType(ByRef mRS_Logic_Config As Recordset) As Boolean

    Dim tempStr As String
    Dim tempErrorStr As String
    
    tempStr = ""
    tempErrorStr = ""
    
On Error GoTo AllLoigicError

    'messageArrayList.Add Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "[" & mRS_Logic_Config("subProcess") & "-" & mRS_Logic_Config("SourceFileID") & "-" & mRS_Logic_Config("LogicType") & "-" & mRS_Logic_Config("SEQ") & "]"

    SysCmd acSysCmdInitMeter, "[Process] Executing ExecuteTask Logic(s) ..... [" & mRS_Logic_Config("subProcess") & "-" & mRS_Logic_Config("SourceFileID") & "-" & mRS_Logic_Config("LogicType") & "-" & mRS_Logic_Config("SEQ") & "]", 100
    DoEvents

    If Not IsNull(mRS_Logic_Config("SQL")) Then
        tempStr = mRS_Logic_Config("SQL")
        
        If InStr(tempStr, "<GenerationDate>") > 0 Then
            tempStr = Replace(tempStr, "<GenerationDate>", tempGenerationDate)
        End If
        
        If InStr(tempStr, "<UserID>") > 0 Then
            tempStr = Replace(tempStr, "<UserID>", "'" & G_USERID & "'")
        End If
        
    End If
    
    Select Case mRS_Logic_Config("LogicType")
    
        Case "Exception"
            
            tempErrorStr = "Exception!"
            If mRS_Logic_Config("True_IF_EQ_0") Then
                If G_DB.ExecuteScalar(tempStr) = 0 Then
                    msgBoxArrayList.Add (mRS_Logic_Config("Description"))
                    GoTo AllLoigicError
                End If
            Else
                If G_DB.ExecuteScalar(tempStr) > 0 Then
                    msgBoxArrayList.Add (mRS_Logic_Config("Description"))
                    GoTo AllLoigicError
                End If
            End If
        
        Case "Warning"
        
            tempErrorStr = "Warning!"
            If mRS_Logic_Config("True_IF_EQ_0") Then
                If G_DB.ExecuteScalar(tempStr) = 0 Then
                    msgBoxArrayList.Add (mRS_Logic_Config("Description"))
                End If
            Else
                If G_DB.ExecuteScalar(tempStr) > 0 Then
                    msgBoxArrayList.Add (mRS_Logic_Config("Description"))
                End If
            End If
            
        Case "StdLogic"
        
            tempErrorStr = "StdLogic Issue!"
            G_DB.ExecuteSQL (tempStr)
        
        Case "CustLogic"
        
            tempErrorStr = "Execute CustLogic Issue!"
            If Not IsNull(mRS_Logic_Config("ConfigClass")) Then
                If Not Run(mRS_Logic_Config("ConfigClass") & "_ExecuteLogic", mRS_Logic_Config) Then
                    GoTo AllLoigicError
                End If
            End If
                        
        Case "Report"
        
            tempErrorStr = "Report Logic Error!"
            If Not fnGenerateReport(mRS_Logic_Config("SQL")) Then
                GoTo AllLoigicError
            End If
            
        Case "ExceptionReport"
            
            tempErrorStr = "Exception Report Logic Error!"
            If Not fnGenerateReport(mRS_Logic_Config("SQL"), True) Then
                msgBoxArrayList.Add (mRS_Logic_Config("Description"))
                GoTo AllLoigicError
            End If
                   
        Case "WarningReport"
        
            tempErrorStr = "Warning Report Logic Error!"
            If Not fnGenerateReport(mRS_Logic_Config("SQL"), True) Then
                msgBoxArrayList.Add (mRS_Logic_Config("Description"))
            End If
            
        Case Else
        
    End Select
    
    processLogicType = True
    Exit Function
    
    
AllLoigicError:
    
    tempErrorStr = tempErrorStr & " SourceFileID = " & mRS_Logic_Config("SourceFileID") & ", LogicType = " & mRS_Logic_Config("LogicType") & ", SEQ = " & mRS_Logic_Config("SEQ") & ", Description = " & mRS_Logic_Config("Description")
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & tempErrorStr)
    msgBoxArrayList.Add (tempErrorStr)
    processLogicType = False
    Exit Function

End Function


Public Function fnGenerateReport(ByVal rsXMLStr As String, Optional ByVal isExceptionWarningReport As Boolean = False) As Boolean

    Dim tempDate As Date
    Dim match As Variant
    Dim matches As Variant
    
    Dim wb As Excel.Workbook
    Dim ws As Excel.Worksheet
    
    Dim objXML As MSXML2.DOMDocument
    Dim objNodeList As MSXML2.IXMLDOMNodeList
    Dim objNode As MSXML2.IXMLDOMNode
    Dim regex As Object
    
    Dim exportFileName As String
    Dim outputFullPath As String
    
    Dim templatePath As String
    Dim outputRange As String
    Dim wsName As String
    Dim hasHeader As Boolean
    Dim shiftDown As Boolean

    Dim excludeFromZip As Boolean
    
    Dim wsCountSetting As Integer
    Dim visibleWSCount As Integer

    Dim hasData As Boolean
    Dim mRS_Report As Recordset
    Dim xmlStr As String
    Dim sqlStr As String
    Dim XlSheetVisibilityStr As String
    
    Dim removeWSIfNoData As Boolean
    
    Dim DataWS As Collection
    

'20170724 v1.1 Freddie Y F Chan [START]
    Dim wsPwd As String
'20170724 v1.1 Freddie Y F Chan [END]

    
'20171003 v1.2 Freddie Y F Chan [START]
    Dim numNodeTotal As Integer
    Dim numNodeIndex As Integer
    Dim objRptNode As MSXML2.IXMLDOMNode
    
    Dim GenerateReportLogicName As String
'20171003 v1.2 Freddie Y F Chan [START]
    
On Error GoTo errHandler

    Set DataWS = New Collection
    Set regex = CreateObject("VBScript.RegExp")
    
    Set objXML = New MSXML2.DOMDocument
    objXML.validateOnParse = False
    objXML.async = False
    
    hasData = False
    excludeFromZip = False
    
    xmlStr = rsXMLStr
    
    With regex
        .Pattern = "<{1}now,.*?>{1}"
        .IgnoreCase = True
        .Global = True
    End With
    
    Set matches = regex.Execute(xmlStr)
    
    For Each match In matches
        xmlStr = Replace(xmlStr, match.Value, Format(Now, Replace(Split(match.Value, ",")(1), ">", "")))
    Next
    
    With regex
        .Pattern = "<{1}GenerationDate,.*?>{1}"
        .IgnoreCase = True
        .Global = True
    End With
    
    Set matches = regex.Execute(xmlStr)
    tempDate = DateSerial(CInt(Left(CStr(tempGenerationDate), 4)), CInt(Mid(CStr(tempGenerationDate), 5, 2)), CInt(Right(CStr(tempGenerationDate), 2)))
    
    For Each match In matches
        xmlStr = Replace(xmlStr, match.Value, Format(tempDate, Replace(Split(match.Value, ",")(1), ">", "")))
    Next
        
    If Not objXML.LoadXML(xmlStr) Then
        Err.Raise objXML.parseError.ErrorCode, , objXML.parseError.reason
    Else
    
        G_xls.xlsApp.Application.Visible = False
        G_xls.xlsApp.Application.DisplayAlerts = False
        'isFirstWS = True
        removeWSIfNoData = True
    
        If objXML.SelectSingleNode("Report").Attributes.Length > 0 Then
            
            'Check for template attribute
            If Not objXML.SelectSingleNode("Report").Attributes.getNamedItem("template") Is Nothing Then
                templatePath = G_TemplateFolder & objXML.SelectSingleNode("Report").Attributes.getNamedItem("template").NodeValue
                Set wb = G_xls.xlsApp.Workbooks.Open(templatePath, ReadOnly:=True)
                
                wb.Worksheets.Add After:=wb.Worksheets(wb.Worksheets.Count)
                wb.Worksheets(wb.Worksheets.Count).Name = "<EOF>"
                                
                'isFirstWS = False
            Else
                templatePath = ""
                wsCountSetting = G_xls.xlsApp.Application.SheetsInNewWorkbook
                G_xls.xlsApp.Application.SheetsInNewWorkbook = 1
                Set wb = G_xls.xlsApp.Workbooks.Add
                G_xls.xlsApp.Application.SheetsInNewWorkbook = wsCountSetting
                
                wb.Worksheets(1).Name = "<EOF>"
                
            End If
            
            'Check for removeWSIfNoData attribute
            If Not objXML.SelectSingleNode("Report").Attributes.getNamedItem("removeWSIfNoData") Is Nothing Then
                removeWSIfNoData = objXML.SelectSingleNode("Report").Attributes.getNamedItem("removeWSIfNoData").NodeValue
            End If

            'Check for name attribute
            If Not objXML.SelectSingleNode("Report").Attributes.getNamedItem("name") Is Nothing Then
                exportFileName = objXML.SelectSingleNode("Report").Attributes.getNamedItem("name").NodeValue
                outputFullPath = defaultOutputPath & exportFileName
            Else
                'Report name attribute is not found
                Err.Raise -999, , "Invalid Report XML Config! Report Name Attribute is mandatory"
            End If
            
            'Check for ExcludeFromZip attribute
            If Not objXML.SelectSingleNode("Report").Attributes.getNamedItem("ExcludeFromZip") Is Nothing Then
                excludeFromZip = objXML.SelectSingleNode("Report").Attributes.getNamedItem("ExcludeFromZip").NodeValue
            Else
                excludeFromZip = False
            End If
            
            
        Else
            'Report name attribute is not found
            Err.Raise -999, , "Invalid Report XML Config! Report Name Attribute is mandatory"
        End If
        
        wb.Activate

        DataWS.Add "<EOF>"
        
        '20171003 v1.2 Freddie Y F Chan [START]
        

        'Set objNodeList = objXML.SelectNodes("/Report/SQL")
        'For Each objNode In objNodeList
        
        Set objNodeList = objXML.SelectNodes("/Report")
                
        For Each objRptNode In objNodeList
        
        numNodeTotal = objRptNode.ChildNodes.Length
        
            If numNodeTotal > 0 Then
            
                For numNodeIndex = 0 To numNodeTotal - 1
            
                Set objNode = objRptNode.ChildNodes(numNodeIndex)
            
                    If objNode.nodeName = "SQL" Then
                    '20171003 v1.2 Freddie Y F Chan [END]
                    
                        sqlStr = objNode.Text
                        
                        G_DB.GetRecordset sqlStr, mRS_Report
                        
                        If mRS_Report.RecordCount > 0 Then
                            
                            If objNode.Attributes.getNamedItem("worksheetName") Is Nothing Then
                                
                                'If Not isFirstWS Then
                                    wb.Worksheets.Add After:=wb.Worksheets(wb.Worksheets.Count)
                                'Else
                                '    isFirstWS = False
                                'End If
                                
                                wsName = wb.Worksheets(wb.Worksheets.Count).Name
                                
                            Else
                                wsName = objNode.Attributes.getNamedItem("worksheetName").NodeValue
                                
                                If Not G_xls.WorksheetExists(wb, wsName) Then
                                    
                                    'If Not isFirstWS Then
                                        wb.Worksheets.Add After:=wb.Worksheets(wb.Worksheets.Count)
                                    'Else
                                    '    isFirstWS = False
                                    'End If
                                    
                                    wb.Worksheets(wb.Worksheets.Count).Name = wsName
            
                                End If
                               
                            End If
                                
                            If objNode.Attributes.getNamedItem("outputRange") Is Nothing Then
                                outputRange = "A1"
                            Else
                                outputRange = objNode.Attributes.getNamedItem("outputRange").NodeValue
                            End If
                            
                            If objNode.Attributes.getNamedItem("hasHeader") Is Nothing Then
                                hasHeader = False
                            Else
                                hasHeader = objNode.Attributes.getNamedItem("hasHeader").NodeValue
                            End If
                            
                            If objNode.Attributes.getNamedItem("shiftDown") Is Nothing Then
                                shiftDown = False
                            Else
                                shiftDown = objNode.Attributes.getNamedItem("shiftDown").NodeValue
                            End If
                                            
            '20170724 v1.1 Freddie Y F Chan [START]
                            If objNode.Attributes.getNamedItem("wsPwd") Is Nothing Then
                                wsPwd = ""
                            Else
                                wsPwd = objNode.Attributes.getNamedItem("wsPwd").NodeValue
                            End If
            '20170724 v1.1 Freddie Y F Chan [END]
                                            
                            hasData = True
                            wb.Worksheets(wsName).Select
                            
            '20170724 v1.1 Freddie Y F Chan [START]
                            If wsPwd <> "" Then
                                 wb.Worksheets(wsName).Unprotect wsPwd
                            End If
            '20170724 v1.1 Freddie Y F Chan [END]
                            
                            
                            G_xls.PutRecordsetToExcelRange mRS_Report, wb.Worksheets(wsName).Range(outputRange), hasHeader, shiftDown
                            wb.Worksheets(wsName).UsedRange.EntireColumn.AutoFit
                            
            '20170724 v1.1 Freddie Y F Chan [START]
                            If wsPwd <> "" Then
                                 wb.Worksheets(wsName).Protect wsPwd
                            End If
            '20170724 v1.1 Freddie Y F Chan [END]
                            
                            DataWS.Add wsName
                            
                            'Set Excel Worksheet Visibility
                            If Not objNode.Attributes.getNamedItem("visibility") Is Nothing Then
                                XlSheetVisibilityStr = objNode.Attributes.getNamedItem("visibility").NodeValue
                            Else
                                XlSheetVisibilityStr = "visible"
                            End If
                            
                            If XlSheetVisibilityStr = "hidden" Then
                                wb.Worksheets(wsName).Visible = xlSheetHidden
                            ElseIf XlSheetVisibilityStr = "veryhidden" Then
                                wb.Worksheets(wsName).Visible = xlSheetVeryHidden
                            Else
                                wb.Worksheets(wsName).Visible = xlSheetVisible
                            End If
                        
                        End If
    
            '20171003 v1.2 Freddie Y F Chan [START]
                    ElseIf objNode.nodeName = "VBA" Then
                        GenerateReportLogicName = objNode.Text & "_ExecuteRptLogic"
                        If Not Run(GenerateReportLogicName, objXML, wb, DataWS, hasData) Then
                            Err.Raise -999, , "Execute Generate Report Logic Error (VBA) [" & objNode.Text & "]"
                        End If
                    End If
                
                Next numNodeIndex
                
            End If
            
        Next objRptNode
        
        'Next objNode
            
            '20171003 v1.2 Freddie Y F Chan [END]
        
        If hasData Then
               
            If removeWSIfNoData Then
                For Each ws In wb.Worksheets
                    If Not itemExistsInCollection(DataWS, ws.Name) Then
                        ws.Delete
                    End If
                Next
            End If
            
            'Count No. of visible Worksheet
            visibleWSCount = 0
            
            For Each ws In wb.Worksheets
                If ws.Visible = xlSheetVisible Then
                    visibleWSCount = visibleWSCount + 1
                End If
            Next
                
            'Remove Workhsheet "<EOF>" if visible Worksheet > 1
            If visibleWSCount > 1 Then
                wb.Worksheets("<EOF>").Delete
            End If
            
            'Select first visible worksheet
            For Each ws In wb.Worksheets
                If ws.Visible = xlSheetVisible Then
                    ws.Select
                    Exit For
                End If
            Next
            
            'Support CSV or XLS output format
            If ws.Name <> "<EOF>" Then
                If UCase(FileExtention(outputFullPath)) = "CSV" Then
                    G_xls.SaveAsCsv wb, outputFullPath
                Else
                    G_xls.SaveAsWorkbook wb, outputFullPath
                End If
                
                'Support Zip exclusion
                If Not excludeFromZip Then
                   exportFileRepositoryArrayList.Add outputFullPath
                End If
            End If
            
        End If
        
        If isExceptionWarningReport And hasData Then
           fnGenerateReport = False
        Else
           fnGenerateReport = True
        End If
        
    End If
    
finally:

    If Not wb Is Nothing Then
        wb.Saved = True
        wb.Close
        Set wb = Nothing
    End If
    
    G_DB.ResetRecordset mRS_Report

    Set objXML = Nothing
    
    Set DataWS = Nothing
    
    Exit Function
    
    
errHandler:
    
    MsgBox (Err.Description)
    fnGenerateReport = False
    GoTo finally

End Function


