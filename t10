clsImport.cls
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsImport"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Private mRS_Import As Recordset
Private mRS_Config As Recordset
Private regex As Object


Private Sub Class_Initialize()

    G_DB.GetRecordsetForUpdate "Select * From _import_file Where type='IMPORT' and process ='" & mCurrentSubProcess & "' order by [Seq]", mRS_Import
    Set regex = CreateObject("VBScript.RegExp")
    
End Sub

Public Function fnImport() As Boolean

    Dim tempIndex As Integer
    Dim match As Variant
    Dim matches As Variant

    Dim pFiles As Variant
    Dim StrErr As String
    Dim StrWarn As String
    Dim StrMsg As String
    Dim pRows As Long
    Dim pTempRows As Long
    
    Dim importSourceFileName As String
    
    Dim namingConventionTemp As String
    Dim DTGenerationDate As Date
    
    Dim aEmptyPosition As String
    Dim aEmptyValue As String
    
    Dim validateMultiFile As Boolean
        
On Error GoTo fnImport_err
    
    importSourceFileName = ""
    namingConventionTemp = ""
    fnImport = True

    
    SysCmd acSysCmdUpdateMeter, 50
    SysCmd acSysCmdInitMeter, "[Process] Validating File(s) .....", 100
    DoEvents
    
    If Not mRS_Import.EOF Then
    
        mRS_Import.MoveFirst
        
        Do Until mRS_Import.EOF
            
            StrErr = ""
            namingConventionTemp = mRS_Import("Namingconvention")
            
            With regex
                .Pattern = "<{1}now,.*>{1}"
                .IgnoreCase = True
                .Global = True
            End With
            
            Set matches = regex.Execute(namingConventionTemp)
            
            For Each match In matches
                namingConventionTemp = Replace(namingConventionTemp, match.Value, Format(Now, Replace(Split(match.Value, ",")(1), ">", "")))
            Next
            
            With regex
                .Pattern = "<{1}GenerationDate,.*>{1}"
                .IgnoreCase = True
                .Global = True
            End With
            
            Set matches = regex.Execute(namingConventionTemp)
            
            For Each match In matches
                DTGenerationDate = DateSerial(CInt(Left(CStr(tempGenerationDate), 4)), CInt(Mid(CStr(tempGenerationDate), 5, 2)), CInt(Right(CStr(tempGenerationDate), 2)))
                namingConventionTemp = Replace(namingConventionTemp, match.Value, Format(DTGenerationDate, Replace(Split(match.Value, ",")(1), ">", "")))
            Next
            
            pFiles = GetFileList(tempSourcePath & namingConventionTemp)
            
            If IsArray(pFiles) Then
                If UBound(pFiles) > 1 Then
                    If Not mRS_Import("multiplefiles") Then
                        StrErr = "More than 1 file for [" & mRS_Import("Description") & IIf(IsNull(mRS_Import("SheetName")), "", " - " & mRS_Import("SheetName")) & "]"
                        msgBoxArrayList.Add (StrErr)
                        mRS_Import("LastImportMsg") = StrErr
                        mRS_Import("lastimportuser") = G_USERID & " - " & G_USERNAME
                        mRS_Import("Lastimportdatetime") = Now
                        mRS_Import.Update
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                        fnImport = False
                        GoTo rs_MoveNext
                    End If
                End If
                
                validateMultiFile = True
                
                For tempIndex = 1 To UBound(pFiles)
                
                    importSourceFileName = FileWithExtention(pFiles(tempIndex))
                    
                    '20171222 v1.2 Freddie Y F Chan - Update Message for import function [START]
                    'SysCmd acSysCmdInitMeter, "[Process] Validating File(s) ..... " & FileWithExtention(pFiles(tempIndex)), 100
                    SysCmd acSysCmdInitMeter, "[Process] Validating File(s) - " & mRS_Import("Description") & " ..... " & FileWithExtention(pFiles(tempIndex)), 100
                    '20171222 v1.2 Freddie Y F Chan - Update Message for import function [END]
                    
                    DoEvents
                
                    If Not fnValidateSourceFile(tempSourcePath & pFiles(tempIndex), mRS_Import) Then
                        StrErr = StrErr & "Incorrect File format [" & FileWithExtention(pFiles(tempIndex)) & "] | "
                        validateMultiFile = False
                        fnImport = False
                    Else
                        If isEmptyFile Then
                            StrWarn = "Warning! NIL File Detected [" & FileWithExtention(pFiles(tempIndex)) & "]"
                            messageArrayList.Add Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrWarn
                            msgBoxArrayList.Add (StrWarn)
                        End If
              
                            If fnImport Then
                            
                                FileCopy tempSourcePath & importSourceFileName, tempLocalSourcePath & importSourceFileName
                                
                                'New Collection with tempSourcePath, inputSourcePath, ExcludeFromZip and DeleteAfterZip
                                Dim tempCollection As New Collection
                                
                                tempCollection.Add tempLocalSourcePath & importSourceFileName
                                tempCollection.Add tempSourcePath & importSourceFileName
                                
                                If G_DB.fieldExists(mRS_Import, "ExcludeFromZip") Then
                                    If mRS_Import("ExcludeFromZip") Then
                                        tempCollection.Add "TRUE"
                                    Else
                                        tempCollection.Add "FALSE"
                                    End If
                                Else
                                    tempCollection.Add "FALSE"
                                End If
                                
                                If G_DB.fieldExists(mRS_Import, "DeleteAfterZip") Then
                                    If mRS_Import("DeleteAfterZip") Then
                                        tempCollection.Add "TRUE"
                                    Else
                                        tempCollection.Add "FALSE"
                                    End If
                                Else
                                    tempCollection.Add "FALSE"
                                End If
                                
                                validatedSourceFileArrayList.Add tempCollection
                                
                                Set tempCollection = Nothing
                            End If
                 
                    End If
                Next
                
                If Not validateMultiFile Then
                    StrErr = Left(StrErr, Len(StrErr) - 2)
                    mRS_Import("LastImportMsg") = StrErr
                    mRS_Import("lastimportuser") = G_USERID & " - " & G_USERNAME
                    mRS_Import("Lastimportdatetime") = Now
                    mRS_Import.Update
                End If
                
            Else
                If mRS_Import("mandatory") Then
                    StrErr = "File [" & mRS_Import("Description") & IIf(IsNull(mRS_Import("SheetName")), "", " - " & mRS_Import("SheetName")) & "] does not exist."
                    msgBoxArrayList.Add (StrErr)
                    mRS_Import("LastImportMsg") = StrErr
                    mRS_Import("lastimportuser") = G_USERID & " - " & G_USERNAME
                    mRS_Import("Lastimportdatetime") = Now
                    mRS_Import.Update
                    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                    fnImport = False
                    GoTo rs_MoveNext
                End If
            End If
           
        If fnImport Then
        
            pRows = 0
    
            StrMsg = ""
            
            G_DB.GetRecordset "Select * from [_Import_Config] where [sourcefileid] = '" & mRS_Import("sourcefileid") & "' order by [FromField]", mRS_Config
            
            pFiles = GetFileList(tempLocalSourcePath & namingConventionTemp)
        
            StrMsg = mRS_Import("sourcefileid") & "- No source File is imported."
            
                If InStr(mRS_Import("sourceType"), "_link") > 0 Then
                
                    If mRS_Import("ClearWholeTable") Then
                        G_DB.ExecuteSQL "Delete from [" & mRS_Import("ToPhysicalTable") & "]"
                    End If
                    
                    If IsArray(pFiles) Then
                    
                        'Pre Import [START]
                        If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "PreImport") Then
                            If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
                                If mRS_Import("PreImport") Then
                                    If Not Run(mRS_Import("ImportClass") & "_" & "ExecutePreImportTable", tempLocalSourcePath & importSourceFileName, mRS_Import, mRS_Config) Then
                                        fnImport = False
                                        StrErr = "[fnImport] Pre Import Source File Error - [" & importSourceFileName & "]"
                                        msgBoxArrayList.Add (StrErr)
                                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                                        GoTo finally
                                    End If
                                End If
                            End If
                        End If
                        'Pre Import [END]
                    
                        If mRS_Import("MultipleFiles") Then
                            
                            For tempIndex = 1 To UBound(pFiles)
    
                                'SysCmd acSysCmdUpdateMeter, 50
                                '20171222 v1.2 Freddie Y F Chan - Update Message for import function [START]
                                'SysCmd acSysCmdInitMeter, "[Process] Importing File(s) ..... " & FileWithExtention(pFiles(tempIndex)), 100
                                SysCmd acSysCmdInitMeter, "[Process] Importing File(s) - " & mRS_Import("Description") & " ..... " & FileWithExtention(pFiles(tempIndex)), 100
                                '20171222 v1.2 Freddie Y F Chan - Update Message for import function [END]
                                DoEvents
                                
                                importSourceFileName = pFiles(tempIndex)
                                    If processLinkTable(tempLocalSourcePath & pFiles(tempIndex), mRS_Import, mRS_Config) = False Then
                                        fnImport = False
                                        GoTo finally
                                    End If
                            Next
                                
                            tempLinkFileArrayList.Add (mRS_Import("DestinationTable"))
                            StrMsg = mRS_Import("sourcefileid") & "- Total [" & UBound(pFiles) & "] source Files are imported."
    
                        Else
                        
                            'SysCmd acSysCmdUpdateMeter, 50
                            '20171222 v1.2 Freddie Y F Chan - Update Message for import function [START]
                            'SysCmd acSysCmdInitMeter, "[Process] Importing File(s) ..... " & FileWithExtention(pFiles(1)), 100
                            SysCmd acSysCmdInitMeter, "[Process] Importing File(s) - " & mRS_Import("Description") & " ..... " & FileWithExtention(pFiles(1)), 100
                            '20171222 v1.2 Freddie Y F Chan - Update Message for import function [END]
                            DoEvents
                            
                            importSourceFileName = pFiles(1)
                                If processLinkTable(tempLocalSourcePath & pFiles(1), mRS_Import, mRS_Config) = False Then
                                    fnImport = False
                                    GoTo finally
                                End If
                                
                            tempLinkFileArrayList.Add (mRS_Import("DestinationTable"))
                            StrMsg = "File [" & FileWithExtention(pFiles(1)) & "] is imported."
                            
                        End If
                        
                        'Post Import [START]
                        If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "PostImport") Then
                            If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
                                If mRS_Import("PostImport") Then
                                    If Not Run(mRS_Import("ImportClass") & "_" & "ExecutePostImportTable", tempLocalSourcePath & importSourceFileName, mRS_Import, mRS_Config) Then
                                        fnImport = False
                                        StrErr = "[fnImport] Post Import Source File Error - [" & importSourceFileName & "]"
                                        msgBoxArrayList.Add (StrErr)
                                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                                        GoTo finally
                                    End If
                                End If
                            End If
                        End If
                        'Post Import [END]
                    
                    End If
                    
                Else
                
                    If mRS_Import("ClearWholeTable") Then
                        G_DB.ExecuteSQL "Delete from [" & mRS_Import("DestinationTable") & "]"
                    End If
                    
                    If IsArray(pFiles) Then
                    
                        'Pre Import [START]
                        If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "PreImport") Then
                            If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
                                If mRS_Import("PreImport") Then
                                    If Not Run(mRS_Import("ImportClass") & "_" & "ExecutePreImportTable", tempLocalSourcePath & importSourceFileName, mRS_Import, mRS_Config) Then
                                        fnImport = False
                                        StrErr = "[fnImport] Pre Import Source File Error - [" & importSourceFileName & "]"
                                        msgBoxArrayList.Add (StrErr)
                                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                                        GoTo finally
                                    End If
                                End If
                            End If
                        End If
                        'Pre Import [END]
                    
                        If mRS_Import("multiplefiles") Then
                            
                            For tempIndex = 1 To UBound(pFiles)
            
    
                                'SysCmd acSysCmdUpdateMeter, 50
                                '20171222 v1.2 Freddie Y F Chan - Update Message for import function [START]
                                'SysCmd acSysCmdInitMeter, "[Process] Importing File(s) ..... " & FileWithExtention(pFiles(tempIndex)), 100
                                SysCmd acSysCmdInitMeter, "[Process] Importing File(s) - " & mRS_Import("Description") & " ..... " & FileWithExtention(pFiles(tempIndex)), 100
                                '20171222 v1.2 Freddie Y F Chan - Update Message for import function [END]
                                DoEvents
                                
                                importSourceFileName = pFiles(tempIndex)
                                pTempRows = fnImportTable(tempLocalSourcePath & pFiles(tempIndex), mRS_Import, mRS_Config)
                                
                                If pTempRows = -1 Then
                                    fnImport = False
                                    GoTo finally
                                Else
                                    pRows = pRows + pTempRows
                                End If
            
                            Next
                                
                            tempLinkFileArrayList.Add (mRS_Import("DestinationTable"))
                            StrMsg = mRS_Import("sourcefileid") & "- Total [" & UBound(pFiles) & "] Files imported with total rows [" & pRows & "] imported."
                            
                        Else
                        
                            'SysCmd acSysCmdUpdateMeter, 50
                            '20171222 v1.2 Freddie Y F Chan - Update Message for import function [START]
                            'SysCmd acSysCmdInitMeter, "[Process] Importing File(s) ..... " & FileWithExtention(pFiles(1)), 100
                            SysCmd acSysCmdInitMeter, "[Process] Importing File(s) - " & mRS_Import("Description") & " ..... " & FileWithExtention(pFiles(1)), 100
                            '20171222 v1.2 Freddie Y F Chan - Update Message for import function [END]
                            DoEvents
                            
                            importSourceFileName = pFiles(1)
                            
                            pRows = fnImportTable(tempLocalSourcePath & pFiles(1), mRS_Import, mRS_Config)
                            
                            If pRows = -1 Then
                                fnImport = False
                                GoTo finally
                            End If
                            
                            StrMsg = "File imported [" & FileWithExtention(pFiles(1)) & "] with total rows [" & pRows & "] imported."
                             
                        End If
                        
                        'Post Import [START]
                        If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "PostImport") Then
                            If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
                                If mRS_Import("PostImport") Then
                                    If Not Run(mRS_Import("ImportClass") & "_" & "ExecutePostImportTable", tempLocalSourcePath & importSourceFileName, mRS_Import, mRS_Config) Then
                                        fnImport = False
                                        StrErr = "[fnImport] Post Import Source File Error - [" & importSourceFileName & "]"
                                        msgBoxArrayList.Add (StrErr)
                                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
                                        GoTo finally
                                    End If
                                End If
                            End If
                        End If
                        'Post Import [END]
                        
                    End If
                
                End If
                
                mRS_Import("LastImportMsg") = StrMsg
                mRS_Import("LastImportUser") = G_USERID & " - " & G_USERNAME
                mRS_Import("LastImportDateTime") = Now
                mRS_Import("LastImportFilePath") = tempSourcePath
                mRS_Import.Update
                
            End If
            
rs_MoveNext:
            mRS_Import.MoveNext
        Loop
    End If

    
finally:

    G_DB.ResetRecordset mRS_Import
    G_DB.ResetRecordset mRS_Config
    
    Exit Function
    
fnImport_err:
    
    fnImport = False
    StrErr = "[fnImport] Import Source File Error - [" & importSourceFileName & "]"
    MsgBox ("[fnImport] Import Source File Error - [" & importSourceFileName & "]" & vbNewLine & Err.Description)
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
    GoTo finally
        
End Function


Private Sub Class_Terminate()

    G_DB.ResetRecordset mRS_Import
    Set regex = Nothing

End Sub

Public Function fnValidateSourceFile(ByVal aFileName As String, ByVal mRS_Import As Recordset) As Boolean
        
    Dim tempIndex As Integer
    Dim tempStr As String

    Dim wb As Excel.Workbook
    Dim ws As Excel.Worksheet
    Dim pValidatePosition() As String
    Dim pValidateValue() As String
    Dim pline As String
    
    Dim fileName As String, textData As String, fileNo As Integer
    
    Dim pEmptyPosition() As String
    Dim pEmptyValue() As String
    
    Dim tempWS As String
    Dim tempWSNum As Integer
        
    On Error GoTo fnValidateSourceFile_err
   
    fnValidateSourceFile = True
    isEmptyFile = True
       
    If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "SelfValidate") And G_DB.fieldExists(mRS_Import, "SelfImport") Then
        If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
            If mRS_Import("SelfValidate") Then
                fnValidateSourceFile = Run(mRS_Import("ImportClass") & "_" & "ExecuteValidateSourceFile", aFileName, mRS_Import)
                GoTo finally
            End If
        End If
    End If
    
    Select Case LCase(mRS_Import("SourceType"))
    
        Case "xls", "xlsx", "csv", "xls_link", "xlsx_link", "csv_link", "xlsm", "xlsm_link"
        
        Set wb = Nothing
    
        G_xls.xlsApp.Application.EnableEvents = False
        
            If G_DB.fieldExists(mRS_Import, "defaultPWD") Then
            
                If Not IsNull(mRS_Import("defaultPWD")) Then
                
                    G_xls.xlsApp.Application.Visible = False

                    On Error Resume Next
                    Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, Password:=mRS_Import("defaultPWD"), UpdateLinks:=False)
                    If wb Is Nothing Then
                        Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                        If wb Is Nothing Then
                            msgBoxArrayList.Add ("Invalid Password for Source File : " & FileWithExtention(aFileName))
                            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Password for Source File : " & FileWithExtention(aFileName))
                            fnValidateSourceFile = False
                            On Error GoTo -1
                            GoTo finally
                        End If
                    End If
                    wb.Password = ""
                    On Error GoTo fnValidateSourceFile_err
                    
                Else
                
                    G_xls.xlsApp.Application.Visible = False
                    Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                    
                End If

            Else
                
                G_xls.xlsApp.Application.Visible = False
                Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                
            End If
            
            Set ws = Nothing
            
            If LCase(mRS_Import("SourceType")) = "xls" Or LCase(mRS_Import("SourceType")) = "xlsx" Or LCase(mRS_Import("SourceType")) = "xlsm" Or LCase(mRS_Import("SourceType")) = "xls_link" Or LCase(mRS_Import("SourceType")) = "xlsx_link" Or LCase(mRS_Import("SourceType")) = "xlsm_link" Then
                
                If Left(mRS_Import("SheetName"), 1) = "[" And Right(mRS_Import("SheetName"), 1) = "]" Then
                    
                    If IsNumeric(Mid(mRS_Import("SheetName"), 2, Len(mRS_Import("SheetName")) - 2)) Then
                        tempWSNum = CInt(Mid(mRS_Import("SheetName"), 2, Len(mRS_Import("SheetName")) - 2))
                    Else
                        msgBoxArrayList.Add ("Invalid Worksheet Number " & mRS_Import("SheetName") & " Config in Source File : " & FileWithExtention(aFileName))
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Worksheet Number " & mRS_Import("SheetName") & " Config in Source File : " & FileWithExtention(aFileName))
                        fnValidateSourceFile = False
                        GoTo finally
                    End If
                    
                    If wb.Worksheets.Count < tempWSNum Then
                        msgBoxArrayList.Add ("Worksheet Number " & mRS_Import("SheetName") & " cannot be found in Source File : " & FileWithExtention(aFileName))
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Worksheet Number " & mRS_Import("SheetName") & " cannot be found in Source File : " & FileWithExtention(aFileName))
                        fnValidateSourceFile = False
                        GoTo finally
                    Else
                        Set ws = wb.Worksheets(tempWSNum)
                    End If
                
                Else
                
                    tempWS = Replace(mRS_Import("SheetName"), "<SPACE>", " ")
                    
                    For tempIndex = 1 To wb.Worksheets.Count
                        If wb.Worksheets(tempIndex).Name = tempWS Then
                            Set ws = wb.Worksheets(tempIndex)
                            Exit For
                        End If
                    Next
                End If
                
            Else
                Set ws = wb.Worksheets(1)
            End If
            
            If ws Is Nothing Then
                
                msgBoxArrayList.Add ("Worksheet name [" & mRS_Import("SheetName") & "] cannot be found in Source File : " & FileWithExtention(aFileName))
                messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Worksheet name [" & mRS_Import("SheetName") & "] cannot be found in Source File : " & FileWithExtention(aFileName))
                fnValidateSourceFile = False
                GoTo finally
            End If
        
            wb.Application.DisplayAlerts = False
            ws.Visible = Excel.XlSheetVisibility.xlSheetVisible
           
            'Empty File Checking
            If Not IsNull(mRS_Import("EmptyRange")) And Not IsNull(mRS_Import("EmptyValue")) Then
                
                pEmptyPosition = Split(mRS_Import("EmptyRange"), ",")
                pEmptyValue = Split(mRS_Import("EmptyValue"), ",")
                
                For tempIndex = 0 To UBound(pEmptyPosition)
                    Select Case Trim(pEmptyValue(tempIndex))
                        Case "isNumeric()"
                                If Not IsNumeric(LCase(Trim(ws.Range(pEmptyPosition(tempIndex)).Value))) Then
                                    isEmptyFile = False
                                    Exit For
                                End If
                        Case "isDate()"
                                If Not IsDate(LCase(Trim(ws.Range(pEmptyPosition(tempIndex)).Value))) Then
                                    isEmptyFile = False
                                    Exit For
                                End If
                        Case "isNothing()"
                                If Not IsEmpty(ws.Range(pEmptyPosition(tempIndex)).Value) Then
                                    isEmptyFile = False
                                    Exit For
                                End If
                        Case "isNotNothing()"
                                If IsEmpty(ws.Range(pEmptyPosition(tempIndex)).Value) Then
                                    isEmptyFile = False
                                    Exit For
                                End If
                        Case Else
                                If LCase(Trim(ws.Range(pEmptyPosition(tempIndex)).Value)) <> LCase(Trim(pEmptyValue(tempIndex))) Then
                                    isEmptyFile = False
                                    Exit For
                                End If
                    End Select
                Next
                
                If isEmptyFile Then
                    fnValidateSourceFile = True
                    GoTo finally
                End If
                
            Else
            
                isEmptyFile = False
            
            End If
           
            'File Validation Checking
            pValidatePosition = Split(mRS_Import("ValidationRange"), ",")
            pValidateValue = Split(mRS_Import("ValidationValue"), ",")
            
            For tempIndex = 0 To UBound(pValidatePosition)
                Select Case Trim(pValidateValue(tempIndex))
                    Case "isNumeric()"
                            If Not IsNumeric(LCase(Trim(ws.Range(pValidatePosition(tempIndex)).Value))) Then
                                fnValidateSourceFile = False
                                Exit For
                            End If
                    Case "isDate()"
                            If Not IsDate(LCase(Trim(ws.Range(pValidatePosition(tempIndex)).Value))) Then
                                fnValidateSourceFile = False
                                Exit For
                            End If
                    Case "isNothing()"
                            If Not IsEmpty(ws.Range(pValidatePosition(tempIndex)).Value) Then
                                fnValidateSourceFile = False
                                Exit For
                            End If
                    Case "isNotNothing()"
                            If IsEmpty(ws.Range(pValidatePosition(tempIndex)).Value) Then
                                fnValidateSourceFile = False
                                Exit For
                            End If
                    Case Else
                            If LCase(Trim(ws.Range(pValidatePosition(tempIndex)).Value)) <> LCase(Trim(pValidateValue(tempIndex))) Then
                                fnValidateSourceFile = False
                                Exit For
                            End If
                End Select
            Next
            
            wb.Close
            Set wb = Nothing
        
        Case "txt", "txt_link", "html", "html_link", "xml"
        
            'Empty File Checking
            If Not IsNull(mRS_Import("EmptyRange")) And Not IsNull(mRS_Import("EmptyValue")) Then
                        
                pEmptyPosition = Split(mRS_Import("EmptyRange"), ",")
                    
                fileNo = FreeFile
                Open aFileName For Input As #fileNo
                
                If UBound(pEmptyPosition) < 2 Then
                    Line Input #fileNo, pline
                Else
                    For tempIndex = 1 To CInt(pEmptyPosition(2))
                        
                        If EOF(fileNo) Then
                            isEmptyFile = True
                            Close #fileNo
                            fnValidateSourceFile = True
                            Exit Function
                        End If
                        
                        Line Input #fileNo, pline
                        
                    Next
                End If
                
                Close #fileNo
                
                Select Case Trim(mRS_Import("EmptyValue"))
                    Case "isNumeric()"
                            If Not IsNumeric(LCase(Trim(Mid(pline, CInt(pEmptyPosition(0)), CInt(pEmptyPosition(1)))))) Then
                                isEmptyFile = False
                            End If
                    Case "isDate()"
                            If Not IsDate(LCase(Trim(Mid(pline, CInt(pEmptyPosition(0)), CInt(pEmptyPosition(1)))))) Then
                                isEmptyFile = False
                            End If
                    Case "isNothing()"
                            If LCase(Trim(Mid(pline, CInt(pEmptyPosition(0)), CInt(pEmptyPosition(1))))) <> "" Then
                                isEmptyFile = False
                            End If
                    Case "isNotNothing()"
                            If LCase(Trim(Mid(pline, CInt(pEmptyPosition(0)), CInt(pEmptyPosition(1))))) = "" Then
                                isEmptyFile = False
                            End If
                    Case Else
                            If LCase(Trim(LCase(Trim(Mid(pline, CInt(pEmptyPosition(0)), CInt(pEmptyPosition(1))))))) <> LCase(Trim(mRS_Import("EmptyValue"))) Then
                                isEmptyFile = False
                            End If
                End Select
                
                If isEmptyFile Then
                    fnValidateSourceFile = True
                    Exit Function
                End If
            Else
            
                isEmptyFile = False
            
            End If
                        
            'File Validation Checking
            
            pValidatePosition = Split(mRS_Import("ValidationRange"), ",")
            
            fileNo = FreeFile
            Open aFileName For Input As #fileNo
            
            If UBound(pValidatePosition) < 2 Then
                Line Input #fileNo, pline
            Else
                For tempIndex = 1 To CInt(pValidatePosition(2))
                    
                    If EOF(fileNo) Then
                        Close #fileNo
                        msgBoxArrayList.Add ("No data can be found at row [" & CInt(pValidatePosition(2)) & "] in source file : " & FileWithExtention(aFileName))
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "No data can be found at row [" & CInt(pValidatePosition(2)) & "] in source file : " & FileWithExtention(aFileName))
                        fnValidateSourceFile = False
                        Exit Function
                    End If
                    
                    Line Input #fileNo, pline
                    
                Next
            End If
            
            Close #fileNo
            
            Select Case Trim(mRS_Import("ValidationValue"))
                Case "isNumeric()"
                        If Not IsNumeric(LCase(Trim(Mid(pline, CInt(pValidatePosition(0)), CInt(pValidatePosition(1)))))) Then
                            fnValidateSourceFile = False
                        End If
                Case "isDate()"
                        If Not IsDate(LCase(Trim(Mid(pline, CInt(pValidatePosition(0)), CInt(pValidatePosition(1)))))) Then
                            fnValidateSourceFile = False
                        End If
                Case "isNothing()"
                        If LCase(Trim(Mid(pline, CInt(pValidatePosition(0)), CInt(pValidatePosition(1))))) <> "" Then
                            fnValidateSourceFile = False
                        End If
                Case "isNotNothing()"
                        If LCase(Trim(Mid(pline, CInt(pValidatePosition(0)), CInt(pValidatePosition(1))))) = "" Then
                            fnValidateSourceFile = False
                        End If
                Case Else
                        If LCase(Trim(LCase(Trim(Mid(pline, CInt(pValidatePosition(0)), CInt(pValidatePosition(1))))))) <> LCase(Trim(mRS_Import("ValidationValue"))) Then
                            fnValidateSourceFile = False
                        End If
            End Select
        
    End Select
    
    If Not fnValidateSourceFile Then
        msgBoxArrayList.Add ("Incorrect File format : " & FileWithExtention(aFileName))
        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Incorrect File format : " & FileWithExtention(aFileName))
    End If
    
finally:

    If Not wb Is Nothing Then
        wb.Close
        Set wb = Nothing
    End If
    
    Exit Function
    
    
fnValidateSourceFile_err:
    
    fnValidateSourceFile = False
    tempStr = "[fnValidateSourceFile] File Validation Error in the source file [" & FileWithExtention(aFileName) & "]"
    MsgBox ("[fnValidateSourceFile] File Validation Error in the source file [" & FileWithExtention(aFileName) & "]" & vbNewLine & Err.Description)
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & tempStr)
    GoTo finally
        
End Function


Public Function fnImportTable(ByVal aFileName As String, ByVal mRS_Import As Recordset, ByVal mRS_Config As Recordset) As Long

    Dim tempStr As String
    
    Dim vDate As Variant
    Dim wb As Excel.Workbook
    Dim ws As Excel.Worksheet
    Dim aRow As Long
    Dim aTable As String
    Dim RS_Insert As New Recordset
    Dim aStrline() As String
    Dim tmpDateArray() As String
    Dim curRow As Long
    Dim bAddRow As Boolean
    Dim bBatchAddRow As Boolean
     
    Dim fileName As String, textData As String, fileNo As Integer, pline As String
    Dim plineArray() As String
        
    On Error GoTo fnImportTable_err
    
    aRow = 0
    
    If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "SelfValidate") And G_DB.fieldExists(mRS_Import, "SelfImport") Then
        If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
            If mRS_Import("SelfImport") Then
                fnImportTable = Run(mRS_Import("ImportClass") & "_" & "ExecuteImportTable", aFileName, mRS_Import, mRS_Config)
                GoTo finally
            End If
        End If
    End If
    
    aTable = mRS_Import("destinationtable")
    
    G_DB.GetRecordsetForUpdate "Select top 1 * From " & aTable, RS_Insert
    
    Select Case LCase(mRS_Import("SourceType"))
        
        Case "xls", "xlsx", "xlsm"
        
            Set wb = Nothing
        
            G_xls.xlsApp.Application.EnableEvents = False
            G_xls.xlsApp.Application.Visible = False
        
            If G_DB.fieldExists(mRS_Import, "defaultPWD") Then
            
                If Not IsNull(mRS_Import("defaultPWD")) Then
                
                    On Error Resume Next
                    Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, Password:=mRS_Import("defaultPWD"), UpdateLinks:=False)
                    If wb Is Nothing Then
                        Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                        If wb Is Nothing Then
                            msgBoxArrayList.Add ("Invalid Password for Source File : " & FileWithExtention(aFileName))
                            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Password for Source File : " & FileWithExtention(aFileName))
                            fnImportTable = -1
                            On Error GoTo -1
                            GoTo finally
                        End If
                    End If
                    wb.Password = ""
                    On Error GoTo fnImportTable_err
                    
                Else
                
                    Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                    
                End If

            Else
                
                Set wb = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                
            End If
            
            Set ws = Nothing
            
            If IsNull(mRS_Import("SheetName")) Then
                Set ws = wb.Worksheets(1)
            ElseIf mRS_Import("SheetName") = "" Then
                Set ws = wb.Worksheets(1)
            Else
            
                If Left(mRS_Import("SheetName"), 1) = "[" And Right(mRS_Import("SheetName"), 1) = "]" Then
                    Set ws = wb.Worksheets(CInt(Mid(mRS_Import("SheetName"), 2, Len(mRS_Import("SheetName")) - 2)))
                Else
                    tempStr = Replace(mRS_Import("SheetName"), "<SPACE>", " ")
                    Set ws = wb.Worksheets(tempStr)
                End If
                
            End If
            
            wb.Application.DisplayAlerts = False
            ws.Visible = Excel.XlSheetVisibility.xlSheetVisible
            
            aRow = mRS_Import("datastartrow")
            
            bBatchAddRow = False
            
            For curRow = aRow To ws.Cells.Find("*", LookIn:=Excel.XlFindLookIn.xlValues, SearchOrder:=Excel.XlSearchOrder.xlByRows, SearchDirection:=Excel.XlSearchDirection.xlPrevious).Row()
                       
                bAddRow = False
                RS_Insert.AddNew
                
                If G_DB.fieldExists(RS_Insert, "rowid") Then RS_Insert("rowid") = aRow
                If G_DB.fieldExists(RS_Insert, "generationdate") Then RS_Insert("generationdate") = tempGenerationDate
                If G_DB.fieldExists(RS_Insert, "filename") Then RS_Insert("filename") = FileWithExtention(aFileName)
                If G_DB.fieldExists(RS_Insert, "LastAmendeduser") Then RS_Insert("LastAmendeduser") = G_USERID
                If G_DB.fieldExists(RS_Insert, "LastUpdatedDatetime") Then RS_Insert("LastUpdatedDatetime") = Now
                If G_DB.fieldExists(RS_Insert, "process") Then RS_Insert("process") = mCurrentSubProcess
                If G_DB.fieldExists(RS_Insert, "SourceFileID") Then RS_Insert("SourceFileID") = mRS_Import("SourceFileID")
                
                If Not mRS_Config.BOF Then
                    mRS_Config.MoveFirst
                End If
                
                Do Until mRS_Config.EOF
                
                    tempStr = mRS_Config("tofield")
                            
                    If mRS_Config("fromfield") = 0 Then
                        RS_Insert(tempStr) = mRS_Config("Value")
                    ElseIf mRS_Config("fromfield") < 0 Then
                        RS_Insert(tempStr) = ws.Range(mRS_Config("Value")).Value
                    Else
                        If Not IsEmpty(ws.Cells(aRow, mRS_Config("fromfield")).Value) And ws.Cells(aRow, mRS_Config("fromfield")).Value <> "" Then
                            
                            bAddRow = True
                            bBatchAddRow = True
                            
                            Select Case mRS_Config("Format")
                                Case "LNG"
                                    RS_Insert(tempStr) = CLng(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value)
                                Case "DEC"
                                    RS_Insert(tempStr) = CDec(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value)
                                Case "MDY_LNG_/"
                                    tmpDateArray = Split(CStr(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value), "/")
                                    RS_Insert(tempStr) = CLng(Format(CInt(Left(tmpDateArray(2), 4)), "0000") & Format(CInt(tmpDateArray(0)), "00") & Format(CInt(tmpDateArray(1)), "00"))
                                Case "DMY_LNG_/"
                                    tmpDateArray = Split(CStr(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value), "/")
                                    RS_Insert(tempStr) = CLng(Format(CInt(Left(tmpDateArray(2), 4)), "0000") & Format(CInt(tmpDateArray(1)), "00") & Format(CInt(tmpDateArray(0)), "00"))
                                Case "DATE"
                                    RS_Insert(tempStr) = CDate(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value)
                                Case Else
                                    RS_Insert(tempStr) = CStr(ws.Cells(aRow, CInt(mRS_Config("fromfield"))).Value)
                            End Select
                            
                        End If
                    
                    End If
                    
                    mRS_Config.MoveNext
                Loop
           
                aRow = aRow + 1
                
                If Not bAddRow Then
                    RS_Insert.CancelUpdate
                End If
                            
        
            Next
            
            If bBatchAddRow Then
                RS_Insert.UpdateBatch
            End If
                
            wb.Saved = True
            wb.Close
            Set wb = Nothing
        
        Case "txt", "csv"
        
            fileNo = FreeFile
            
            Open aFileName For Input As #fileNo
            
                aRow = 1
                
                Do While Not EOF(fileNo)
                    
                    If aRow < mRS_Import("datastartrow") Then
                    
                        Line Input #fileNo, pline
                        
                        
                    Else
                                            
                        Line Input #fileNo, pline
                        
                        bAddRow = False
                        
                        With regex
                        
                            'This pattern matches only commas outside quotes
                            'Pattern = ",(?=([^"]*"[^"]*")*(?![^"]*"))"
                            
                            .Pattern = mRS_Import("delimitor") & "(?=([^" & Chr(34) & "]*" & Chr(34) & "[^" & Chr(34) & "]*" & Chr(34) & ")*(?![^" & Chr(34) & "]*" & Chr(34) & "))"
                            .Global = True
                            
                        End With
                        
                        plineArray() = Split(regex.Replace(pline, "~!@#$"), "~!@#$")
                        
                        RS_Insert.AddNew
                
                        If G_DB.fieldExists(RS_Insert, "rowid") Then RS_Insert("rowid") = aRow
                        If G_DB.fieldExists(RS_Insert, "generationdate") Then RS_Insert("generationdate") = tempGenerationDate
                        If G_DB.fieldExists(RS_Insert, "filename") Then RS_Insert("filename") = FileWithExtention(aFileName)
                        If G_DB.fieldExists(RS_Insert, "LastAmendeduser") Then RS_Insert("LastAmendeduser") = G_USERID
                        If G_DB.fieldExists(RS_Insert, "LastUpdatedDatetime") Then RS_Insert("LastUpdatedDatetime") = Now
                        If G_DB.fieldExists(RS_Insert, "process") Then RS_Insert("process") = mCurrentSubProcess
                        If G_DB.fieldExists(RS_Insert, "SourceFileID") Then RS_Insert("SourceFileID") = mRS_Import("SourceFileID")
                        
                        If Not mRS_Config.BOF Then
                            mRS_Config.MoveFirst
                        End If
                    
                         Do Until mRS_Config.EOF
                         
                             tempStr = mRS_Config("tofield")
                                     
                             If mRS_Config("fromfield") = 0 Then
                                 RS_Insert(tempStr) = mRS_Config("Value")
                             ElseIf mRS_Config("fromfield") < 0 Then
                                 'No handling fromfield < 0 for csv and txt source file type
                             Else
                                 
                                 If mRS_Config("fromfield") - 1 <= UBound(plineArray) Then
                                    If removeQuotes(plineArray(mRS_Config("fromfield") - 1)) <> "" Then
                                        
                                        bAddRow = True
                                        bBatchAddRow = True
                                        
                                        Select Case mRS_Config("Format")
                                            Case "LNG"
                                                RS_Insert(tempStr) = CLng(removeQuotes(plineArray(mRS_Config("fromfield") - 1)))
                                            Case "DEC"
                                                RS_Insert(tempStr) = CDec(removeQuotes(plineArray(mRS_Config("fromfield") - 1)))
                                            Case "MDY_LNG_/"
                                                tmpDateArray = Split(CStr(removeQuotes(plineArray(mRS_Config("fromfield") - 1))), "/")
                                                RS_Insert(tempStr) = CLng(Format(CInt(Left(tmpDateArray(2), 4)), "0000") & Format(CInt(tmpDateArray(0)), "00") & Format(CInt(tmpDateArray(1)), "00"))
                                            Case "DMY_LNG_/"
                                                tmpDateArray = Split(CStr(removeQuotes(plineArray(mRS_Config("fromfield") - 1))), "/")
                                                RS_Insert(tempStr) = CLng(Format(CInt(Left(tmpDateArray(2), 4)), "0000") & Format(CInt(tmpDateArray(1)), "00") & Format(CInt(tmpDateArray(0)), "00"))
                                            Case "DATE"
                                                RS_Insert(tempStr) = CDate(removeQuotes(plineArray(mRS_Config("fromfield") - 1)))
                                            Case "DATE_FMT"
                                                
                                                vDate = DateTimeParse(removeQuotes(plineArray(mRS_Config("fromfield") - 1)), mRS_Config("Value"))
                                                
                                                If IsDate(vDate) Then
                                                    RS_Insert(tempStr) = vDate
                                                Else
                                                    fnImportTable = -1
                                                    GoTo fnImportTable_err
                                                End If
                                                
                                            Case Else
                                                RS_Insert(tempStr) = CStr(removeQuotes(plineArray(mRS_Config("fromfield") - 1)))
                                        End Select
                                        
                                    End If
                                End If
                             
                             End If
                             
                             mRS_Config.MoveNext
                         Loop
                         
                        If Not bAddRow Then
                            RS_Insert.CancelUpdate
                        End If
                         
                    End If
                
                    aRow = aRow + 1
                    
                Loop
                
                If bBatchAddRow Then
                    RS_Insert.UpdateBatch
                End If
                
            Close #fileNo
        
    End Select
    
    fnImportTable = aRow - mRS_Import("datastartrow")
    
finally:

    If Not wb Is Nothing Then
        wb.Close
        Set wb = Nothing
    End If
    
    Close #fileNo
    
    Set ws = Nothing
    
    G_DB.ResetRecordset RS_Insert
    
    Exit Function
        
fnImportTable_err:
    
    tempStr = "[fnImportTable] Issue encountered at row [" & aRow & "] in the source file [" & FileWithExtention(aFileName) & "]"
    msgBoxArrayList.Add (tempStr & vbNewLine & Err.Description)
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & tempStr)
    fnImportTable = -1
    GoTo finally
           
End Function

Public Function processLinkTable(ByVal aFileName As String, ByVal mRS_Import As Recordset, ByVal mRS_Config As Recordset) As Boolean

    Dim tempIndex As Integer
    Dim tempStr As String

    Dim postImportSQL As String
    Dim StrErr As String
    Dim xlsWB As Excel.Workbook
    Dim xlsWS As Excel.Worksheet
    Dim ws_temp As Excel.Worksheet
    
    Dim xlsRange As Excel.Range
    Dim insertColumnsSQL As String
    Dim selectColumnsSQL As String
    Dim whereClauseSQL As String
    Dim validSQL As Boolean
    Dim selectInsertSQL As Boolean
    Dim postImportSQLArrayList As New Collection
    
    Dim RS_Insert As New Recordset
    Dim aTable As String
    
On Error GoTo processLinkTable_err

    validSQL = False
    selectInsertSQL = False
    insertColumnsSQL = "Insert into [" & mRS_Import("ToPhysicalTable") & "] ("
    selectColumnsSQL = "Select "
    whereClauseSQL = ""
    
    Set postImportSQLArrayList = Nothing
    
    If G_DB.fieldExists(mRS_Import, "ImportLibrary") And G_DB.fieldExists(mRS_Import, "ImportClass") And G_DB.fieldExists(mRS_Import, "SelfValidate") And G_DB.fieldExists(mRS_Import, "SelfImport") Then
        If Not IsNull(mRS_Import("ImportLibrary")) And Not IsNull(mRS_Import("ImportClass")) Then
            If mRS_Import("SelfImport") Then
                processLinkTable = Run(mRS_Import("ImportClass") & "_" & "ExecuteImportTable")
                GoTo finally
            End If
        End If
    End If
           
    Select Case LCase(mRS_Import("sourcetype"))
    
        Case "xls_link", "xlsx_link", "xlsm_link"
            
            Set xlsWB = Nothing
        
            G_xls.xlsApp.Application.EnableEvents = False
            G_xls.xlsApp.Application.Visible = False
        
            If G_DB.fieldExists(mRS_Import, "defaultPWD") Then
            
                If Not IsNull(mRS_Import("defaultPWD")) Then
                    
                    On Error Resume Next
                    Set xlsWB = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, Password:=mRS_Import("defaultPWD"), UpdateLinks:=False)
                    If xlsWB Is Nothing Then
                        Set xlsWB = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                        If xlsWB Is Nothing Then
                            msgBoxArrayList.Add ("Invalid Password for Source File : " & FileWithExtention(aFileName))
                            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Password for Source File : " & FileWithExtention(aFileName))
                            processLinkTable = False
                            On Error GoTo -1
                            GoTo finally
                        End If
                    End If
                    xlsWB.Password = ""
                    On Error GoTo processLinkTable_err
                    
                Else
                
                    Set xlsWB = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                    
                End If

            Else

                Set xlsWB = G_xls.xlsApp.Application.Workbooks.Open(aFileName, ReadOnly:=True, UpdateLinks:=False)
                
            End If
            
            Set xlsWS = Nothing
            
            If IsNull(mRS_Import("SheetName")) Then
                Set xlsWS = xlsWB.Worksheets(1)
            ElseIf mRS_Import("SheetName") = "" Then
                Set xlsWS = xlsWB.Worksheets(1)
            Else
                If Left(mRS_Import("SheetName"), 1) = "[" And Right(mRS_Import("SheetName"), 1) = "]" Then
                    Set xlsWS = xlsWB.Worksheets(CInt(Mid(mRS_Import("SheetName"), 2, Len(mRS_Import("SheetName")) - 2)))
                Else
                    tempStr = Replace(mRS_Import("SheetName"), "<SPACE>", " ")
                    Set xlsWS = xlsWB.Worksheets(tempStr)
                End If
            End If
            
            xlsWS.Visible = Excel.XlSheetVisibility.xlSheetVisible
            xlsWS.Select
            
            If G_DB.fieldExists(mRS_Import, "defaultWSPWD") Then
            
                If Not IsNull(mRS_Import("defaultWSPWD")) Then
                    
                    On Error Resume Next
                     
                    xlsWS.Unprotect (mRS_Import("defaultWSPWD"))

                        If xlsWS.ProtectContents Then
                            msgBoxArrayList.Add ("Invalid Password for Worksheet (" & mRS_Import("SheetName") & ") in Source File : " & FileWithExtention(aFileName))
                            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Password for Worksheet (" & mRS_Import("SheetName") & ") in Source File : " & FileWithExtention(aFileName))
                            processLinkTable = False
                            GoTo finally
                        End If

                    On Error GoTo processLinkTable_err
                    
                End If
                
            End If
            
                
            If Not mRS_Config.BOF Then
                mRS_Config.MoveFirst
            End If
                                
            Do Until mRS_Config.EOF
            
                If CInt(mRS_Config("fromfield")) = 0 Then
                
                    validSQL = True
                    
                    insertColumnsSQL = insertColumnsSQL & " [" & mRS_Config("ToField") & "],"
                    
                    If IsNull(mRS_Config("format")) Then
                         selectColumnsSQL = selectColumnsSQL & " [" & mRS_Config("Value") & "],"
                    Else
                        If mRS_Config("format") = "HARDCODE_TEXT" Then
                            selectColumnsSQL = selectColumnsSQL & " '" & mRS_Config("Value") & "',"
                        ElseIf mRS_Config("format") = "HARDCODE_NUM" Then
                            selectColumnsSQL = selectColumnsSQL & " " & mRS_Config("Value") & ","
                        Else
                            selectColumnsSQL = selectColumnsSQL & " [" & mRS_Config("Value") & "],"
                        End If
                    End If
                    
                ElseIf CInt(mRS_Config("fromfield")) < 0 Then
                
                    whereClauseSQL = " WHERE " & mRS_Config("Value")
                    
                Else
                     If Not IsNull(mRS_Config("format")) Then
                        If mRS_Config("format") = "SQL" Then
                            postImportSQLArrayList.Add mRS_Config("Value") & ""
                            selectInsertSQL = True
                        Else
                             Set xlsRange = xlsWS.Columns(mRS_Config("FromField"))
                             
                             Select Case mRS_Config("format")
                                Case "DATE"
                                    xlsRange.NumberFormat = mRS_Config("Value")
                                Case "NUMBER"
                                    xlsRange.NumberFormat = mRS_Config("Value")
                                Case "TEXT"
                                    xlsRange.NumberFormat = "@"
                                Case Else
                             End Select
                        End If
                     End If
                End If
                
                mRS_Config.MoveNext
            
            Loop
            
            '20170724 v1.1 Freddie Y F Chan [START]
            If G_DB.fieldExists(mRS_Import, "xlUnicodeText") Then
                If mRS_Import("xlUnicodeText") Then
                    G_xls.SaveAsXlUnicodeText xlsWB, mRS_Import("DestinationTable")
                Else
                    G_xls.SaveAsCsv xlsWB, mRS_Import("DestinationTable")
                End If
            Else
                G_xls.SaveAsCsv xlsWB, mRS_Import("DestinationTable")
            End If
    
            'G_xls.SaveAsCsv xlsWB, mRS_Import("DestinationTable")
            
            '20170724 v1.1 Freddie Y F Chan [END]
             
            xlsWB.Saved = True
            xlsWB.Close
            Set xlsWB = Nothing
            
        Case "txt_link", "csv_link", "html_link"
            
            If Not mRS_Config.BOF Then
                mRS_Config.MoveFirst
            End If
                                
            Do Until mRS_Config.EOF
            
                If CInt(mRS_Config("fromfield")) = 0 Then
                
                    validSQL = True
                    
                    insertColumnsSQL = insertColumnsSQL & " [" & mRS_Config("ToField") & "],"
                    
                    If IsNull(mRS_Config("format")) Then
                         selectColumnsSQL = selectColumnsSQL & " [" & mRS_Config("Value") & "],"
                    Else
                        If mRS_Config("format") = "HARDCODE_TEXT" Then
                            selectColumnsSQL = selectColumnsSQL & " '" & mRS_Config("Value") & "',"
                        ElseIf mRS_Config("format") = "HARDCODE_NUM" Then
                            selectColumnsSQL = selectColumnsSQL & " " & mRS_Config("Value") & ","
                        Else
                            selectColumnsSQL = selectColumnsSQL & " [" & mRS_Config("Value") & "],"
                        End If
                    End If
                    
                ElseIf CInt(mRS_Config("fromfield")) < 0 Then
                
                    whereClauseSQL = " WHERE " & mRS_Config("Value")
                    
                Else
                     If Not IsNull(mRS_Config("format")) Then
                        If mRS_Config("format") = "SQL" Then
                            postImportSQLArrayList.Add mRS_Config("Value") & ""
                            selectInsertSQL = True
                        End If
                     End If
                End If
                
                mRS_Config.MoveNext
            
            Loop
            
            FileCopy aFileName, mRS_Import("DestinationTable")
            
    End Select
    
    If selectInsertSQL Then
    
        For tempIndex = 1 To postImportSQLArrayList.Count
            
            postImportSQL = postImportSQLArrayList(tempIndex)
            
            If InStr(postImportSQL, "<GenerationDate>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<GenerationDate>", tempGenerationDate)
            End If
        
            If InStr(postImportSQL, "<FileName>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<FileName>", "'" & FileWithExtention(aFileName) & "'")
            End If
            
            If InStr(postImportSQL, "<Process>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<Process>", "'" & mCurrentSubProcess & "'")
            End If
            
            If InStr(postImportSQL, "<LastAmendeduser>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<LastAmendeduser>", "'" & G_USERID & "'")
            End If
            
            If InStr(postImportSQL, "<LastUpdatedDatetime>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<LastUpdatedDatetime>", "now")
            End If
            
            If InStr(postImportSQL, "<SourceFileID>") > 0 Then
                postImportSQL = Replace(postImportSQL, "<SourceFileID>", "'" & mRS_Import("SourceFileID") & "'")
            End If
                        
                        
            G_DB.ExecuteSQL postImportSQL
           
        Next
        
    ElseIf validSQL Then
    
            aTable = mRS_Import("ToPhysicalTable")
    
            G_DB.GetRecordset "Select top 1 * From " & aTable, RS_Insert
    
            If G_DB.fieldExists(RS_Insert, "GenerationDate") Then
                    insertColumnsSQL = insertColumnsSQL & " [GenerationDate],"
                    selectColumnsSQL = selectColumnsSQL & " " & tempGenerationDate & ","
            End If
            
            If G_DB.fieldExists(RS_Insert, "FileName") Then
                    insertColumnsSQL = insertColumnsSQL & " [FileName],"
                    selectColumnsSQL = selectColumnsSQL & " '" & FileWithExtention(aFileName) & "',"
            End If

            If G_DB.fieldExists(RS_Insert, "Process") Then
                    insertColumnsSQL = insertColumnsSQL & " [Process],"
                    selectColumnsSQL = selectColumnsSQL & " '" & mCurrentSubProcess & "',"
            End If
        
            If G_DB.fieldExists(RS_Insert, "LastAmendeduser") Then
                    insertColumnsSQL = insertColumnsSQL & " [LastAmendeduser],"
                    selectColumnsSQL = selectColumnsSQL & " '" & G_USERID & "',"
            End If
            
            If G_DB.fieldExists(RS_Insert, "LastUpdatedDatetime") Then
                    insertColumnsSQL = insertColumnsSQL & " [LastUpdatedDatetime],"
                    selectColumnsSQL = selectColumnsSQL & " Now,"
            End If
            
            If G_DB.fieldExists(RS_Insert, "SourceFileID") Then
                    insertColumnsSQL = insertColumnsSQL & " [SourceFileID],"
                    selectColumnsSQL = selectColumnsSQL & " '" & mRS_Import("SourceFileID") & "',"
            End If
            
            postImportSQL = Left(insertColumnsSQL, Len(insertColumnsSQL) - 1) & ") " & Left(selectColumnsSQL, Len(selectColumnsSQL) - 1) & " From [" & mRS_Import("FromLinkTable") & "]" & whereClauseSQL
            G_DB.ExecuteSQL (postImportSQL)
            
    Else
    
        msgBoxArrayList.Add ("Invalid Post Import SQL for Link File [" & FileWithExtention(aFileName) & "]")
        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Post Import SQL for Link File [" & FileWithExtention(aFileName) & "]")
        processLinkTable = False
        GoTo finally
                
    End If
    
    processLinkTable = True
    
finally:
           
    If Not xlsWB Is Nothing Then
        xlsWB.Close
        Set xlsWB = Nothing
    End If
    
    Set xlsWS = Nothing
    
    Set postImportSQLArrayList = Nothing
    
    G_DB.ResetRecordset RS_Insert
    
    Exit Function
    
    
processLinkTable_err:
    
    processLinkTable = False
    StrErr = "[processLinkTable] Process Link Table Error in the source file [" & FileWithExtention(aFileName) & "]"
    MsgBox ("[processLinkTable] Process Link Table Error in the source file [" & FileWithExtention(aFileName) & "]" & vbNewLine & Err.Description)
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & StrErr)
    GoTo finally
        
End Function

