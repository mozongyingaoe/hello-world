mdlCommon.bas
Attribute VB_Name = "mdlCommon"
Public Declare Function ShowWindow Lib "user32" _
       (ByVal hwnd As Long, _
       ByVal nCmdShow As Long) As Long
Private Declare Function w32GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Public Declare Function SetParent Lib "user32" (ByVal hWndChild As Long, ByVal hWndNewParent As Long) As Long
Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpclassname As String, ByVal lpWindowName As String) As Long
Public Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Public Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Public Const G_PAGESIZE As Integer = 10
Public Type st
    dispAlert As Boolean
    screenUpd As Boolean
End Type

Sub getCfg(Optional overrideUser As String = "")
Dim usr As clsUser
Set usr = New clsUser
G_Cfg.dbPath = ThisWorkbook.Names("DBPath").RefersToRange.value
G_Cfg.dbPW = G_DBPW
'G_Cfg.dbPW = "ot_2016"
If overrideUser <> "" Then G_Cfg.switchUser = overrideUser
G_Cfg.userName = IIf(G_Cfg.switchUser = "", GetUserName, G_Cfg.switchUser)
G_Cfg.ver = ThisWorkbook.Names("AppVer").RefersToRange.value
G_Cfg.Env = ThisWorkbook.Names("Env").RefersToRange.value
'Minnie @20161206
G_Cfg.templatepath = ThisWorkbook.Names("templatePath").RefersToRange.value

If Conn Is Nothing Then
    Set Conn = New clsConn
End If

Conn.dbPassword = G_Cfg.dbPW
Conn.dbPath = G_Cfg.dbPath


Conn.openDB

If G_Cfg.scheme <> "" Then

    G_Cfg.fromTable = Conn.ExecuteScalar("select lcase(max(table_from)) from tbl_func where table= '?'", G_Cfg.scheme)
    
                   
End If

G_Cfg.title = Conn.ExecuteScalar("select max(menuhead) & '_' & max(menuitem) from tbl_func where table= '?'", G_Cfg.scheme)

G_Cfg.userFullName = IIf(G_Cfg.switchUser = "", usr.userNM, Conn.ExecuteScalar("select user_name from tbl_user where a_user_id ='?'", G_Cfg.switchUser))

G_Cfg.Role = Conn.ExecuteScalar("select sys_role from tbl_user where a_user_id ='?'", IIf(G_Cfg.switchUser = "", usr.userID, G_Cfg.switchUser))


End Sub
Public Function GetUserName() As String
Dim sTemp As String
Dim lReturn As Long
    
    sTemp = Space(50)
    
    lReturn = w32GetUserName(sTemp, Len(sTemp))
    GetUserName = Trim(Replace(sTemp, Chr(0), " "))
End Function
Sub inItialization(Optional overrideUser As String = "")

Dim rs_MenuField As New Recordset
Set Conn = New clsConn
Call getCfg(overrideUser)

'If overrideUser <> "" Then
'    G_Cfg.userName = overrideUser
'    G_Cfg.userFullName = Conn.ExecuteScalar("select user_name from tbl_user where a_user_id ='?'", overrideUser)
'    G_Cfg.switchUser = overrideUser
'End If

Conn.GetRecordset "select a.* from tbl_func a left join tbl_AccessFunc b on a.u_id = b.func_id where b.user_id is not null and b.user_id='?' order by a.id asc", rs_MenuField, G_Cfg.userName


If rs_MenuField.RecordCount <= 0 Then
    MsgBox "No Access Right", vbCritical
    Exit Sub
End If

addMenuItem rs_MenuField


rs_MenuField.Close

Dim rs_log As New Recordset, usr As clsUser
Set usr = New clsUser

'If overrideUser = "" Then G_Cfg.userFullName = usr.userNM

Conn.GetRecordset "select * from tbl_log where id is null", rs_log

rs_log.AddNew

rs_log!staff_id = IIf(overrideUser <> "", G_Cfg.userName, usr.userID)
rs_log!staff_name = IIf(overrideUser <> "", G_Cfg.userFullName, usr.userNM)
rs_log!logdatetime = Now()
rs_log!logMessage = "Login"
rs_log.Update
rs_log.Close
Conn.closeDB
Set rs_log = Nothing
Set rs_MenuField = Nothing
Set Conn = Nothing



End Sub

Function testFaceId()
Dim ncbar As CommandBar


For Each cb In Application.CommandBars

    If cb.Name = "customebar" Then

        cb.Delete
    End If

Next



Set ncbar = Application.CommandBars.Add("customebar", , , True)

ncbar.Width = 500
ncbar.Visible = True
ncbar.Position = msoBarTop


Dim btn As CommandBarButton

For i = 1 To 800
    
    Set btn = ncbar.Controls.Add(MsoControlType.msoControlButton, , , , True)
    btn.Caption = CStr(i)
    btn.Style = msoButtonIconAndCaption
    btn.FaceId = i
    btn.TooltipText = i
Next


'ncbar.Width = 600
End Function

Sub addMenuItem(ByVal rs_Menu As Recordset)

Dim bar As CommandBar, menuItem As CommandBarControl, menuControl As CommandBarPopup

Set bar = Application.CommandBars(1)

mdlCommon.deleteControl bar.Controls, "PDB_Menu"

Set menuControl = bar.Controls.Add(MsoControlType.msoControlPopup, temporary:=True)

menuControl.Caption = "Function Menu"
menuControl.Tag = "PDB_Menu"

Do While Not rs_Menu.EOF
       
    If mdlCommon.checkIfControlExist(menuControl.Controls, checkType.byName, rs_Menu!menuhead, menuItem) = True Then
        
        With menuItem
        
            With .Controls.Add(MsoControlType.msoControlButton, temporary:=True)
                
                .Caption = rs_Menu!menuItem
                .OnAction = IIf(IsNull(rs_Menu!func), "", rs_Menu!func)
                .Style = msoButtonIconAndCaption
                .Tag = rs_Menu!u_id
                .FaceId = rs_Menu!FaceId
            End With
        
        End With
            
    Else
    
    
        With menuControl
            
            If IsNull(rs_Menu!menuItem) Then
            
                With .Controls.Add(Type:=MsoControlType.msoControlButton, temporary:=True)
                    
                    .Caption = rs_Menu!menuhead
                    .OnAction = IIf(IsNull(rs_Menu!func), "", rs_Menu!func)
                    .Style = msoButtonIconAndCaption
                    .Tag = rs_Menu!u_id
                    .FaceId = rs_Menu!FaceId
                End With
            
            Else
                
            
                With .Controls.Add(Type:=MsoControlType.msoControlPopup, temporary:=True)
                    
                    .Caption = rs_Menu!menuhead
                   ' .OnAction = IIf(IsNull(rs_Menu!func), "", rs_Menu!func)
                   
                    
                    With .Controls.Add(Type:=MsoControlType.msoControlButton, temporary:=True)
                        
                        .Caption = rs_Menu!menuItem
                        .OnAction = IIf(IsNull(rs_Menu!func), "", rs_Menu!func)
                        .Style = msoButtonIconAndCaption
                        .Tag = rs_Menu!u_id
                        .FaceId = rs_Menu!FaceId
                    End With
                    
                End With
         
                
            End If
        
        End With
    
        
    End If
        

    rs_Menu.MoveNext
Loop


End Sub


Sub testing()
Dim ws As Worksheet

Set ws = ActiveSheet
Dim bar As CommandBar
Set bar = Application.CommandBars(1)
'Dim ctl As CommandBarComboBox
Set ctl = bar.Controls.Add(Type:=MsoControlType.msoControlPopup, temporary:=True)
ctl.Tag = "custom"


Dim ctlDp As CommandBarComboBox

Set ctlDp = ctl.Controls.Add(Type:=MsoControlType.msoControlComboBox, temporary:=True)

ctlDp.AddItem "N menu"
ctlDp.AddItem "QQ Menu"

Dim testdp As CommandBarComboBox

Set testdp = bar.Controls.Add(Type:=MsoControlType.msoControlComboBox, temporary:=True)
testdp.AddItem "OKOK"


Dim menuItem As CommandBarButton

Set menuItem = ctl.Controls.Add(Type:=MsoControlType.msoControlButton, temporary:=True)

menuItem.Caption = "&menu1"

ctlDp.Caption = "TestMenu"

ctl.AddItem "YY"

ctlDp.Delete

ctl.Delete

'mdlCommon.deleteControl bar, "custom"

End Sub

Function createControl(ByVal ctlCaption As String, ctltype As MsoControlType, _
                        ByVal id As String, func As String, Optional dpValue = "")
Dim ws As Worksheet

Set ws = ActiveSheet
Dim bar As CommandBar
Set bar = Application.CommandBars(1)
    
mdlCommon.deleteControl bar, id


Select Case ctltype

    Case MsoControlType.msoControlButton
    
    Case MsoControlType.msoControlComboBox
    
    Case MsoControlType.msoControlEdit
    
End Select



Dim btn As CommandBarButton
Set btn = bar.Controls.Add(ctltype, id, , , True)
With btn

    .Style = msoButtonIconAndCaption
    
    .OnAction = "handler1"
    .Caption = "OK"
    .Tag = "NewButton"

    
End With




End Function

Function checkIfControlExist(bar As CommandBarControls, tp As checkType, btnID As String, Optional ByRef rtn_ctl As CommandBarControl = Nothing) As Boolean
    
    Dim ctl As CommandBarControl
    
    For Each ctl In bar
    
        If tp = byId Then
        
            If ctl.Tag = btnID Then
            
                checkIfControlExist = True
                Set rtn_ctl = ctl
                Exit Function
                
            End If
        ElseIf tp = byName Then
        
            If ctl.Caption = btnID Then
            
                checkIfControlExist = True
                Set rtn_ctl = ctl
                Exit Function
                
            End If
            
        End If
        
        
    Next

    checkIfControlExist = False
    
End Function

Function deleteControl(bar As CommandBarControls, id As String) As Boolean
    
    For Each ctl In bar
        
        If ctl.Tag = id Then
            
            ctl.Delete
            
            deleteControl = True
            
        End If
    Next
    deleteControl = False
End Function

Sub addCellMenu()
Dim ws As Worksheet

Set ws = ActiveSheet
Dim bar As CommandBar
Set bar = Application.CommandBars("Cell")
Dim btn As CommandBarButton
Set btn = bar.Controls.Add(msoControlButton, , , , True)
With btn
    .Caption = "Cell OK"
    .OnAction = "handler1"

End With


End Sub

Sub deleteCellMenu()
Dim bar As CommandBar
Set bar = Application.CommandBars("Cell")
Dim b As CommandBarControl

For Each b In bar.Controls
    Debug.Print b.Caption
    If b.Caption = "Cell OK" Then
        b.Visible = True
        
        b.Delete
    End If
    
Next

End Sub


Function setOffCfg(stg As st)
    
    With Application
                
        stg.dispAlert = .DisplayAlerts
        stg.screenUpd = .ScreenUpdating
        
        .DisplayAlerts = False
        .ScreenUpdating = False
        
    End With
    
End Function

Function setOnCfg(stg As st)
    
    With Application
                
              
        .DisplayAlerts = stg.dispAlert
        .ScreenUpdating = stg.screenUpd
        
    End With
    
End Function

Sub check_Staff()
G_Cfg.scheme = "tbl_staff"
G_Cfg.taBle = "tbl_staff"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub
Sub check_Candidate()
G_Cfg.scheme = "tbl_people"
G_Cfg.taBle = "tbl_people"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub


Sub main_Staff()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_staff"
G_Cfg.taBle = "tbl_staff"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If


frm_Search.Show 0
End Sub
Sub main_Dept()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_dept"
G_Cfg.taBle = "tbl_dept"
Call getCfg
If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If

frm_Search.Show 0
End Sub
Sub main_Team()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_team"
G_Cfg.taBle = "tbl_team"
Call getCfg
If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If

frm_Search.Show 0
End Sub
Sub main_OT()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_ot"
G_Cfg.taBle = "tbl_ot"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If


frm_Search.Show 0
End Sub

Sub main_OT2()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_ot2"
G_Cfg.taBle = "tbl_ot2"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If


frm_Search.Show 0
End Sub
Sub check_OT()
G_Cfg.scheme = "tbl_ot"
G_Cfg.taBle = "tbl_ot"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub
Sub check_OT2()
G_Cfg.scheme = "tbl_ot2"
G_Cfg.taBle = "tbl_ot2"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub

Sub check_Dept()
G_Cfg.scheme = "tbl_dept"
G_Cfg.taBle = "tbl_dept"
Call getCfg
G_Cfg.mode = "C"
frm_Search.Show 0
End Sub
Sub check_Team()
G_Cfg.scheme = "tbl_team"
G_Cfg.taBle = "tbl_team"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub
Sub main_Candidate()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If

G_Cfg.scheme = "tbl_people"
G_Cfg.taBle = "tbl_people"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If

frm_Search.Show 0
End Sub
Sub Main_Position()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_pos"
G_Cfg.taBle = "tbl_pos"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If

frm_Search.Show 0
End Sub

Sub main_Migration()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
G_Cfg.scheme = "tbl_migration"
G_Cfg.taBle = "tbl_migration"
Call getCfg

If G_Cfg.MC = True Then
    G_Cfg.mode = "M"
End If

frm_Search.Show 0
End Sub
Sub check_Migration()
G_Cfg.scheme = "tbl_migration"
G_Cfg.taBle = "tbl_migration"
Call getCfg
G_Cfg.mode = "C"

frm_Search.Show 0
End Sub

Sub main_Admin()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
 
Call getCfg
 

frm_Admin.Show 0
End Sub


Public Sub HRList_Upload()
    frm_HRList.Show
End Sub


Sub checkbtn()
Dim bar As CommandBar
Set bar = Application.CommandBars(1)
Dim b As CommandBarControl

For Each b In bar.Controls
   
    If b.Caption = "OK" Then
        b.Visible = True
        
        b.Delete
    End If
    
Next


End Sub



Public Function save_Update(ByRef u_id As String, u_idField As String, ByRef valChange As String) As String
Dim rs_F As New Recordset, sqlStr As String, ctl As clsCtl, sqlVal As String, rKey As String
Dim hasChanged As Boolean
Dim cnt_A As Long, cnt_D As Long
Dim str_Mandatory_fields As String
Dim maintenance_Flag As String
Dim unmatchFields As String
Dim outputValidationFields As String
Dim a_type As String
Dim s_Status As String
maintenance_Flag = frm_Detail.btn_Save.Tag

'B++**Minnie @20161004 handle Migration for non maker/checker mode
Dim pd As pos_Detail
'E++@20161004

On Error GoTo errHandle:
Conn.BeginTrans


'If Not frm_Search.LV_Result.SelectedItem Is Nothing Then
'
'    a_type = frm_Search.LV_Result.SelectedItem
'
'End If

If maintenance_Flag = "A" Then

    u_id = clsColl(u_idField).getCtlValue
    
    cnt_A = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.fromTable & "] where [" & _
                            u_idField & "]='" & u_id & "' and status='A' and status_end_date is null ")
                            
    cnt_D = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.taBle & "] where [" & _
                            u_idField & "]='" & u_id & "' and status in ('D','A') and status_end_date is null ")
                            
    If G_Cfg.taBle <> G_Cfg.fromTable Then
        If cnt_A <> 1 Or cnt_D > 0 Then
          save_Update = "invalid record for udpate"
        End If
    Else
        If cnt_A > 0 Or cnt_D > 0 Then
            save_Update = "invalid record for udpate"
        End If
                                    
    End If
    
    rKey = Conn.ExecuteScalar("select max([reckey]) from [" & G_Cfg.fromTable & "] where [" & _
                            u_idField & "]='" & u_id & "' and status='A' and status_end_date is null ")
 
   
Else
    
    cnt_A = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='A' and status_end_date is null ")
                        
    cnt_D = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='D' and status_end_date is null ")
    If cnt_A <> 1 Or cnt_D > 0 Then
      save_Update = "invalid record for udpate"
    End If

    
'   If a_type = "A" Then
'
'        rKey = Conn.ExecuteScalar("select max([reckey]) from [" & G_Cfg.fromTable & "] where [" & _
'                        u_idField & "]='" & u_id & "' and status='A' and status_end_date is null ")
'
'
'    Else
        rKey = Conn.ExecuteScalar("select max([reckey]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status in ('A', 'R') and status_end_date is null ")
'    End If
End If


If maintenance_Flag = "A" Then
    Conn.GetRecordset "select * from tbl_fieldlist where (status<>'N' or status is null) and table='?' and U_type='Add' ", _
        rs_F, G_Cfg.scheme
Else
    Conn.GetRecordset "select * from tbl_fieldlist where (status<>'N' or status is null) and table='?' and U_type='Update' ", _
        rs_F, G_Cfg.scheme


End If
If maintenance_Flag = "D" Then

    'if draft reocrd aldy exist then remove it
    maintenance_Flag = Conn.ExecuteScalar("select max([recaction]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='D' and status_end_date is null ")
    
    p_rKey = Conn.ExecuteScalar("select max([reckey]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='D' and status_end_date is null ")
                        
    rtn = Conn.ExecuteSQL("delete from [" & G_Cfg.taBle & "] where reckey=?", p_rKey)
    
    
End If

sqlStr = "insert into [" & G_Cfg.taBle & "] ("

Do While Not rs_F.EOF
    
    Set ctl = clsColl.Item(rs_F!int_Field_Name)
    
    If ctl.getFValue = "null" And IIf(IsNull(rs_F!mandatory), "", rs_F!mandatory) = "Y" Then
    
        str_Mandatory_fields = str_Mandatory_fields & vbCrLf & rs_F!out_field_name
    
 
    
    Else
        If ctl.ctype = cbx Then
    
            If ctl.cbx.MatchFound = False And ctl.cbx.Text <> "" Then
                unmatchFields = unmatchFields & vbCrLf & ctl.lb_title.Caption
            End If
            
        End If
        
        'output validation in field level
        If ctl.o_validation <> "" Or LCase(IIf(IsNull(rs_F!field_type), "", rs_F!field_type)) = "num" Then
            tmpstr = ctl.output_fieldValidation
            If tmpstr <> "" Then
                outputValidationFields = outputValidationFields & ctl.lb_title & ":  " & tmpstr & vbCrLf
            End If
            If LCase(IIf(IsNull(rs_F!field_type), "", rs_F!field_type)) = "num" And Not IsNumeric(ctl.getCtlValue) Then
                outputValidationFields = outputValidationFields & ctl.lb_title & ": expected in number format!" & vbCrLf
            End If
        End If
    
        If IIf(IsNull(rs_F!sys_key), "", rs_F!sys_key) <> "Y" Then
        
            If ctl.isUpdateField = True Then
                
                
               If CStr(ctl.ori_Value) <> CStr(ctl.getCurrCtl(ctl.ctype).Text) Then
                   
                    valChange = valChange & ctl.lb_title & ","
                    
                    hasChanged = True
                   'MH 20170220********add the handling of update SQL per field value changed
                    
                    If ctl.str_updateSQL <> "" Then
                        ctl.exe_updateSQL
                    End If
                                       
               End If
               
                                  
               sqlStr = sqlStr & "[" & ctl.int_Field_Name & "],"
               
               sqlVal = sqlVal & ctl.getFValue & ","
                
            'B++**Minnie @20161004 handle Migration for non maker/checker mode
                If LCase(G_Cfg.scheme) = "tbl_migration" And G_Cfg.MC <> True Then
                    Select Case LCase(ctl.int_Field_Name)
                    Case "m_id"
                        pd.M_ID = ctl.getCtlValue
                    Case "m_type"
                        pd.m_Type = ctl.getCtlValue
                    Case "m_band_4"
                        pd.b_4 = ctl.getCtlValue
                    Case "m_band_5"
                        pd.b_5 = ctl.getCtlValue
                    Case "m_band_6"
                        pd.b_6 = ctl.getCtlValue
                    Case "m_band_7"
                        pd.b_7 = ctl.getCtlValue
                    Case "m_band_8"
                        pd.b_8 = ctl.getCtlValue
                    Case "m_dept_id"
                        pd.dept_ID = ctl.getCtlValue
                    Case "team_id"
                        pd.team_ID = ctl.getCtlValue
                    End Select
                End If
              'E++ Minnie @20161004
            ElseIf CStr(ctl.ori_Value) <> CStr(ctl.getCurrCtl(ctl.ctype).Text) Then
                                       
                   'MH 20170220********add the handling of update SQL per field value changed
                    
                If ctl.str_updateSQL <> "" Then
                    ctl.exe_updateSQL
                End If
                
            End If
        
        End If
    End If
        
    rs_F.MoveNext
Loop

If unmatchFields <> "" Then
    save_Update = "Drop Down validation failed: " & vbCrLf & unmatchFields
    Conn.Rollback
    Exit Function
End If

If outputValidationFields <> "" Then
    save_Update = "Field validation failed: " & vbCrLf & outputValidationFields
    Conn.Rollback
    Exit Function
End If

If hasChanged <> True Then
    save_Update = "No changes made"
    Conn.Rollback
    Exit Function
    
'B Minnie @20161031
Else
    Dim msgResult As Variant
    msgResult = MsgBox("You have updated below fields: " & Left(valChange, Len(valChange) - 1), vbOKCancel, "Update Fields")
    If msgResult <> vbOK Then
        save_Update = "Update cancelled"
        Conn.Rollback
        Exit Function
    End If
'E Minnie @20161031
End If


If str_Mandatory_fields <> "" Then
    save_Update = "Mandatory fields missing" & str_Mandatory_fields
    Conn.Rollback
    Exit Function
End If

If mdlCommon.checkExistCollection("Staff_Status", clsColl) = True Then
    
    s_Status = clsColl("Status").getFValue
    'B Minnie @20161031
    If s_Status = "null" Then
        s_Status = "A"
    Else
        s_Status = mID(s_Status, 2, 1)
    End If
    'E Minnie @20161031
End If

If mdlCommon.checkExistCollection("Pos_Status", clsColl) = True Then
    s_Status = clsColl("Status").getFValue
    s_Status = mID(s_Status, 2, Len(s_Status) - 2)
End If

If G_Cfg.MC <> True Then

    'b++Minnie @20161004 Bug-Fix for Migration for non maker/checker mode
   
   ' pd.m_ID = conn.ExecuteScalar("select
      If G_Cfg.scheme = "tbl_migration" And pd.M_ID <> "" Then
            
            If pd.m_Type = "I" Then
                pd.no_Fte = pd.b_4 + pd.b_5 + pd.b_6 + pd.b_7 + pd.b_8
                mdlCommon.insertPOSID pd
            ElseIf pd.m_Type = "O" Or pd.m_Type = "S" Then
                'mdlCommon.disablePOSID pd
            End If
            
        End If

    'e++ @20161004

    'Begin++ Minnie @20161004
    'Bug Fixed:for Non-MakerChecker Mode, Status need to be updated according to Staff_Status

     'to update the pos_id status
    If mdlCommon.checkExistCollection("Staff_Status", clsColl) = True Then
        
        '**Update by Minnie @20160906 add one more status  "Transfer out"
        If (Left(clsColl("Staff_Status").getCtlValue, 1) = "R" Or Left(clsColl("Staff_Status").getCtlValue, 1) = "T") And LCase(G_Cfg.scheme) = "tbl_staff" Then

'            Dim rs_POS As New Recordset
'            Conn.GetRecordset "select * from tbl_pos where pos_id='?' and status='A'", rs_POS, clsColl("pos_id").getCtlValue
'
'            If Not rs_POS.EOF Then
'                rs_POS!backfill_status = "B"
'                rs_POS!host_appr = False
'                rs_POS!appr_date = Null
'                rs_POS.UpdateBatch adAffectAll
'
'                rs_POS.Close
'            End If
'            Set rs_POS = Nothing
            s_Status = "R"
        
        End If
        
        If mdlCommon.checkExistCollection("Pos_Status", clsColl) = True And LCase(G_Cfg.scheme) = "tbl_pos" Then
            s_Status = "R"
        End If
        
    End If
    'End Minnie @20161004

    
    sqlStr = sqlStr & "[Last_Update_Date],[Last_Update_By],[Maker_Add], [Status],link_reckey,[Status_Start_Date]) "
    
    sqlVal = "values(" & sqlVal & _
            "#" & Format(Now(), "dd/MMM/yyyy") & "#," & _
            "'" & G_Cfg.userName & "'," & _
            "'" & G_Cfg.userName & "'," & _
            IIf(s_Status = "", "'A',", "'" & s_Status & "',") & _
            IIf(rKey = "", "null", rKey) & "," & _
            "#" & Format(Now(), "HH:MM:SS dd/MMM/yyyy") & "#" & ")"
    
    
    sqlStr = sqlStr & sqlVal


    Dim rs_Ori As New Recordset
    
    If maintenance_Flag = "A" And (G_Cfg.scheme <> G_Cfg.fromTable) Then
    
                    
        Conn.GetRecordset "select * from [" & _
            G_Cfg.fromTable & "] " & _
            "where reckey=?", rs_Ori, rKey
        
                     
            rs_Ori!Status = "L"
            rs_Ori!last_update_date = Format(Now(), "dd/MMM/yyyy")
            rs_Ori!last_update_by = G_Cfg.userName
            rs_Ori!maker_remove = G_Cfg.userName
            'rs_Ori!Status_end_date = Format(Now(), "HH:MM:SS dd/MMM/yyyy")
            rs_Ori.UpdateBatch adAffectAll
            
            rs_Ori.Close
            
        
        Set rs_Ori = Nothing
    
    ElseIf maintenance_Flag = "A" Then
    
        'mdlCommon.update_ReckeyRecord G_Cfg.scheme, CStr(u_id)
        frm_Detail.Tag = u_id
    Else
    
        Conn.GetRecordset "select * from [" & G_Cfg.taBle & "] where reckey=?", rs_Ori, rKey
        rs_Ori!Status = "C"
        rs_Ori!status_end_date = Format(Now(), "HH:MM:SS dd/MMM/yyyy")
        
        rs_Ori!maker_remove = G_Cfg.userName
        rs_Ori!last_update_date = Format(Now(), "dd/MMM/yyyy")
        rs_Ori!last_update_by = G_Cfg.userName
        rs_Ori.UpdateBatch adAffectAll
    End If
    

    rtn = Conn.ExecuteSQL(sqlStr)

    

    If rtn = 1 Then save_Update = "YD"
Else

    sqlStr = sqlStr & "[Last_Update_Date],[Last_Update_By],[Maker_Add], [link_reckey],[Status], recaction ) "
    
    sqlVal = "values(" & sqlVal & _
            "#" & Format(Now(), "dd/MMM/yyyy") & "#," & _
            "'" & G_Cfg.userName & "'," & _
            "'" & G_Cfg.userName & "'," & _
            IIf(rKey = "", "null", rKey) & "," & _
            "'D'," & _
            "'" & maintenance_Flag & "')"
    
    'sqlStr = left(sqlStr, Len(sqlStr) - 1) & " where [" & u_idField & "]='" & u_id & "' and status_end_date is null"
    
    sqlStr = sqlStr & sqlVal
    
    rtn = Conn.ExecuteSQL(sqlStr)

    If rtn = 1 Then save_Update = "YM"

End If



Conn.Commit

Exit Function
    
errHandle:
    Conn.Rollback
    MsgBox (Err.Description)
    rtn = "Reocrd not saved / checked"
    
End Function

Public Function check_Update(ByRef u_id As String, u_idField As String, ByRef pos_Dtl As pos_Detail) As String
Dim rs_F As New Recordset, sqlStr As String, ctl As clsCtl, sqlVal As String, rKey As String, rs_Update As New Recordset
Dim rs_Ori As New Recordset
Dim hasChanged As Boolean
Dim cnt_A As Long, cnt_D As Long
On Error GoTo errHandle



cnt_A = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.fromTable & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='A' and status_end_date is null ")

cnt_D = Conn.ExecuteScalar("select count([" & u_idField & "]) from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='D'  ")


If cnt_D <> 1 Then
    check_Update = "no draft record for check"
    Err.Raise -999, Description:="no draft record for check"
End If



Conn.GetRecordset "select * from [" & G_Cfg.taBle & "] where [" & _
                        u_idField & "]='" & u_id & "' and status='D'  ", rs_Update

rs_Update!Status = "A"

rs_Update!checker_add = G_Cfg.userName

rs_Update!last_update_date = Format(Now, "dd/MMM/yyyy")

rs_Update!status_start_date = Format(Now, "dd/MMM/yyyy HH:MM:SS")


If rs_Update!recaction = "A" Then


    If G_Cfg.taBle <> G_Cfg.fromTable Then
    
        If cnt_A <> 1 Then
            check_Update = "invalid record for check"
            Err.Raise -999, Description:="invalid record for check"
        End If
    Else
        If cnt_A > 0 Then
            check_Update = "invalid record for check"
            Err.Raise -999, Description:="invalid record for check, more than 1 record."
        End If
    End If
    
    
        
    Conn.GetRecordset "select * from [" & _
        G_Cfg.fromTable & "] " & _
        "where reckey=?", rs_Ori, IIf(IsNull(rs_Update!link_reckey), "null", rs_Update!link_reckey)
        
    If LCase(G_Cfg.scheme) = "tbl_migration" Then
        pos_Dtl.dept_ID = rs_Update!m_dept_id
        pos_Dtl.M_ID = rs_Update!M_ID
        pos_Dtl.team_ID = rs_Update!team_ID
        pos_Dtl.no_Fte = CLng(IIf(IsNull(rs_Update!M_Band_4), 0, rs_Update!M_Band_4)) + _
                           CLng(IIf(IsNull(rs_Update!m_band_5), 0, rs_Update!m_band_5)) + _
                           CLng(IIf(IsNull(rs_Update!m_band_6), 0, rs_Update!m_band_6)) + _
                           CLng(IIf(IsNull(rs_Update!m_band_7), 0, rs_Update!m_band_7)) + _
                           CLng(IIf(IsNull(rs_Update!m_band_8), 0, rs_Update!m_band_8))
        pos_Dtl.maker_Add = rs_Update!maker_Add
        pos_Dtl.m_Type = rs_Update!m_Type
        pos_Dtl.b_4 = CLng(IIf(IsNull(rs_Update!M_Band_4), 0, rs_Update!M_Band_4))
        pos_Dtl.b_5 = CLng(IIf(IsNull(rs_Update!m_band_5), 0, rs_Update!m_band_5))
        pos_Dtl.b_6 = CLng(IIf(IsNull(rs_Update!m_band_6), 0, rs_Update!m_band_6))
        pos_Dtl.b_7 = CLng(IIf(IsNull(rs_Update!m_band_7), 0, rs_Update!m_band_7))
        pos_Dtl.b_8 = CLng(IIf(IsNull(rs_Update!m_band_8), 0, rs_Update!m_band_8))
    End If

    

Else

    Conn.GetRecordset "select * from [" & G_Cfg.taBle & "] where [reckey]=? and status='A'", _
                    rs_Ori, rs_Update!link_reckey
     'to update the pos_id status
    If mdlCommon.checkExistCollection("Staff_Status", clsColl) = True Then
        
        '**Update by Minnie @20160906 add one more status  "Transfer out"
        If (Left(rs_Update!Staff_Status, 1) = "R" Or Left(rs_Update!Staff_Status, 1) = "T") And LCase(G_Cfg.scheme) = "tbl_staff" Then
        'If left(rs_Update!Staff_Status, 1) = "R" And LCase(G_Cfg.scheme) = "tbl_staff" Then
        
            Dim rs_POS As New Recordset
            Conn.GetRecordset "select * from tbl_pos where pos_id='?' and status='A'", rs_POS, rs_Update!pos_id
                        
            If Not rs_POS.EOF Then
                rs_POS!backfill_status = "B"
                rs_POS!host_appr = False
                rs_POS!appr_date = Null
                rs_POS.UpdateBatch adAffectAll
                                
                rs_POS.Close
            End If
            Set rs_POS = Nothing
            rs_Update!Status = "R"
        
        End If
        
        If mdlCommon.checkExistCollection("Pos_Status", clsColl) = True And LCase(G_Cfg.scheme) = "tbl_pos" Then
            rs_Update!Status = "R"
        End If
        
    End If
    
    
    
End If


If Not rs_Ori.EOF Then
    If G_Cfg.fromTable <> G_Cfg.taBle And rs_Update!recaction = "A" Then
        rs_Ori!Status = "L"
        
    Else
        rs_Ori!Status = "C"
        rs_Ori!status_end_date = Format(Now(), "dd/MMM/yyyy HH:MM:SS")
    End If
    rs_Ori!checker_remove = G_Cfg.userName
    rs_Ori!maker_remove = rs_Update!maker_Add
    'rs_Ori!remove_time = Format(Now(), "hh:mm:ss dd/MMM/yyyy")
    
End If

rs_Update!recaction = Null

rs_Ori.UpdateBatch adAffectAll
rs_Update.UpdateBatch adAffectAll




rs_Ori.Close
Set rs_Ori = Nothing
rs_Update.Close
Set rs_Update = Nothing
check_Update = "CD"
Exit Function

errHandle:
MsgBox (Err.Description)

    
End Function

Sub main_Interview()
If G_Cfg.currentForm <> "" Then
    MsgBox G_Cfg.currentForm & " is currently open, please close first"
    Exit Sub
End If
Call getCfg
G_Cfg.scheme = "tbl_interview"
G_Cfg.taBle = "tbl_interview"
G_Cfg.mode = "M"

frm_Search.Show 0
End Sub

Public Function update_ReckeyRecord(ByVal id_type As String, ByVal id_val As String)
    
    If CLng(Right(id_val, Len(id_val) - 1)) > Conn.ExecuteScalar("select max(id) from tbl_ID where id_type='?'", id_type) Then
        
        Conn.ExecuteSQL "update tbl_id set id = '?' where id_type='?'", Right(id_val, Len(id_val) - 1), id_type
        
        If CLng(mID(id_val, 2, 4)) > Conn.ExecuteScalar("select max(rec_year) from tbl_ID where id_type='?'", id_type) Then
            
            Conn.ExecuteSQL "update tbl_id set rec_year = '?' where id_type='?'", mID(id_val, 2, 4), id_type
        
        End If
        
    End If
    
End Function

Public Function insertPOSID(p_dtl As pos_Detail) As String
                            
rtn = Conn.ExecuteScalar("select count(*) from tbl_POS where M_ID='?'", p_dtl.M_ID)
If rtn > 0 Then
    insertPOSID = "Migration already exist!"
    Exit Function
End If

Dim recKey_Start As Long, recKey_Count As Long
Dim RS_Insert As New Recordset, RS_Reckey As New Recordset

Conn.GetRecordset "select * from tbl_ID where lcase(id_type)='tbl_pos'", RS_Reckey

If RS_Reckey!rec_year < Year(Now()) Then

    RS_Reckey!rec_year = Year(Now())
    RS_Reckey!id = CLng(Year(Now()) & 0)

    
End If

recKey_Start = Conn.ExecuteScalar("select id from tbl_id where lcase(id_type) ='tbl_pos'")
recKey_Count = 1


Conn.GetRecordset "select * from tbl_POS", RS_Insert


    For i_c = 1 To p_dtl.no_Fte

        RS_Insert.AddNew
        RS_Insert!M_ID = p_dtl.M_ID
        RS_Insert!pos_id = RS_Reckey!id_ini & (recKey_Start + recKey_Count)
        RS_Insert!dept_ID = p_dtl.dept_ID
        RS_Insert!team_ID = p_dtl.team_ID
        RS_Insert!status_start_date = Format(Now(), "dd-MMM-yyyy HH:mm:ss")
        RS_Insert!last_update_date = Format(Now(), "dd-MMM-yyyy")
        RS_Insert!last_update_by = G_Cfg.userName
        RS_Insert!maker_Add = p_dtl.maker_Add
        RS_Insert!checker_add = G_Cfg.userName
        RS_Insert!P_Type = p_dtl.m_Type
        RS_Insert!Status = "A"
        RS_Insert!backfill_status = "M"
        'Minnie @20161117
'        RS_Insert!host_appr = "Y"
        RS_Insert!host_appr = "Approved"
        RS_Insert!appr_date = Format(Now(), "dd-MMM-yyyy")
        recKey_Count = recKey_Count + 1
        
        With p_dtl
            If i_c <= .b_4 Then
                RS_Insert!band = 4
            ElseIf i_c <= (.b_4 + .b_5) Then
                RS_Insert!band = 5
            ElseIf i_c <= (.b_4 + .b_5 + .b_6) Then
                RS_Insert!band = 6
            ElseIf i_c <= (.b_4 + .b_5 + .b_6 + .b_7) Then
                RS_Insert!band = 7
            ElseIf i_c <= (.b_4 + .b_5 + .b_6 + .b_7 + .b_8) Then
                RS_Insert!band = 8
        
            End If
            
        End With
    Next
    

RS_Insert.UpdateBatch adAffectAll


RS_Reckey!id = CLng(RS_Reckey!id) + recKey_Count - 1
RS_Reckey.Update



RS_Insert.Close
Set RS_Insert = Nothing
RS_Reckey.Close
Set RS_Reckey = Nothing


                            
End Function

Public Function disablePOSID(p_dtl As pos_Detail) As String
                            
rtn = Conn.ExecuteScalar("select count(*) from tbl_POS where O_M_ID='?'", p_dtl.M_ID)
If rtn > 0 Then
    disablePOSID = "Migration already exist!"
    Exit Function
End If

rtn = Conn.ExecuteScalar("select count(*) from tbl_pos a left join " & _
                        "(select * from tbl_staff where status_end_date is null and status='A') b " & _
                        "on a.pos_id = b.pos_id where b.pos_id is null and a.dept_id='?' and a.team_id='?' ", _
                            p_dtl.dept_ID, p_dtl.team_ID)

If rtn < p_dtl.no_Fte Then
    disablePOSID = "No sufficent position to out!"
    Exit Function
End If

Dim RS_Insert As New Recordset, rs_Ori As New Recordset

'Conn.BeginTrans



'Conn.GetRecordset "select * from tbl_ID where lcase(id_type)='?'", RS_Reckey, LCase(G_Cfg.scheme)
'
'If RS_Reckey!rec_year < Year(Now()) Then
'
'    RS_Reckey!rec_year = Year(Now())
'    RS_Reckey!id = CLng(Year(Now()) & 0)
'    RS_Reckey.Update
'
'End If




Conn.GetRecordset "select top ? a.* from tbl_pos a left join " & _
                    "(select * from tbl_staff where status_end_date is null and status='A') b " & _
                    "on a.pos_id = b.pos_id where b.pos_id is null and a.dept_id='?' and a.team_id='?' and a.status='A' " & _
                    "order by a.host_appr desc, a.POS_ID asc", rs_Ori, p_dtl.no_Fte, p_dtl.dept_ID, p_dtl.team_ID
                    
                    
Conn.GetRecordset "select * from tbl_POS", RS_Insert



Do While Not rs_Ori.EOF
     
        RS_Insert.AddNew
        RS_Insert!o_m_id = p_dtl.M_ID
        RS_Insert!M_ID = rs_Ori!M_ID
        RS_Insert!pos_id = rs_Ori!pos_id
        RS_Insert!dept_ID = rs_Ori!dept_ID
        RS_Insert!team_ID = rs_Ori!team_ID
        RS_Insert!status_start_date = Format(Now(), "dd-MMM-yyyy HH:mm:ss")
        RS_Insert!last_update_date = Format(Now(), "dd-MMM-yyyy")
        RS_Insert!last_update_by = G_Cfg.userName
        RS_Insert!maker_Add = p_dtl.maker_Add
        RS_Insert!checker_add = G_Cfg.userName
        RS_Insert!link_reckey = rs_Ori!reckey
        RS_Insert!P_Type = p_dtl.m_Type
        RS_Insert!Status = "R"
        
        rs_Ori!Status = "C"
        rs_Ori!status_end_date = Format(Now(), "dd-MMM-yyyy HH:mm:ss")
        rs_Ori!maker_remove = p_dtl.maker_Add
        rs_Ori!checker_remove = G_Cfg.userName
        rs_Ori!last_update_by = G_Cfg.userName
        rs_Ori!last_update_date = Format(Now(), "dd-MMM-yyyy")
     
        
        
        rs_Ori.MoveNext
               
    
Loop

RS_Insert.UpdateBatch adAffectAll

rs_Ori.UpdateBatch



'Conn.Commit

RS_Insert.Close
Set RS_Insert = Nothing
rs_Ori.Close
Set rs_Ori = Nothing


                            
End Function


Public Function checkExistCollection(ByVal itm As String, ByVal ctlcol As Collection) As Boolean
    checkExistCollection = False
    For Each E In ctlcol
        If E.int_Field_Name = itm Then
            checkExistCollection = True
            Exit For
        End If
    Next
End Function

Public Function checkExistList(ByVal itm As String, ByVal lst As Variant) As Boolean
    checkExistList = False
    For Each E In lst
        If E = itm Then
            checkExistList = True
            Exit For
        End If
    Next
End Function

Public Function setColInfo(usrform As Object, col As Collection) As Boolean
    Dim s_Size As String
    For Each ctl In usrform.Controls

         s_Size = ctl.Height / usrform.Height
         s_Size = s_Size & "," & (ctl.Width / usrform.Width)
         s_Size = s_Size & "," & (ctl.Top / usrform.Height)
         s_Size = s_Size & "," & (ctl.Left / usrform.Width)
         If LCase(ctl.Name) = "lv_result" Then
            s_Size = s_Size & "," & (ctl.Font.Size * 100) / usrform.Height
         End If
         col.Add s_Size, ctl.Name
        
    Next
    
    setColInfo = True
End Function

Public Function switchUser()
    If (LCase(G_Cfg.Env) = "dev" Or LCase(G_Cfg.Env) = "sit") Then
         tmp_usr = InputBox("Please input user ID to switch for testing purpose", "Please input")
         If tmp_usr <> "" And IsNumeric(tmp_usr) And Len(tmp_usr) = 8 Then
            mdlCommon.inItialization CStr(tmp_usr)
         End If
    End If
End Function

Public Sub exitApp()
    Set bar = Application.CommandBars(1)

    deleteControl bar.Controls, "PDB_Menu"
    
    ThisWorkbook.Saved = True
     
    ThisWorkbook.Close savechanges:=False
End Sub

Public Sub showVer()
    frm_Ver.Show 1
End Sub


Public Sub openStaffCard()
    If G_Cfg.currentForm <> "" Then
        MsgBox G_Cfg.currentForm & " is currently open, please close first"
        Exit Sub
    End If
    frm_Card.Show 0
End Sub

Public Sub openSwapForm()
    If G_Cfg.currentForm <> "" Then
        MsgBox G_Cfg.currentForm & " is currently open, please close first"
        Exit Sub
    End If
    frm_SwapPos.Show 0
End Sub

Public Function checkFieldExist(rs As Recordset, fname As String) As Boolean

    For i_f = 0 To rs.Fields.Count - 1
    
        If rs.Fields(i_f).Name = fname Then
            
            checkFieldExist = True
            Exit Function
        End If
    Next
    
    checkFieldExist = False
End Function

Public Sub openICATsForm()
    Call getCfg
    If G_Cfg.currentForm <> "" Then
        MsgBox G_Cfg.currentForm & " is currently open, please close first"
        Exit Sub
    End If
    frm_ICATS.Show 0
End Sub

Public Sub openActionLog()
    Call getCfg
    If G_Cfg.currentForm <> "" Then
        MsgBox G_Cfg.currentForm & " is currently open, please close first"
        Exit Sub
    End If
    frm_Log.Show 0
End Sub

Public Function insertLog(ByVal msg As String) As Boolean
    
    On Error GoTo errHandle
    If msg = "" Then Exit Function
        
    If Conn Is Nothing Then
        Call getCfg
    End If
        
    Dim rs_log As New Recordset
        
        
        
    Conn.GetRecordset "select * from tbl_log where id is null", rs_log

    rs_log.AddNew
    
    rs_log!staff_id = G_Cfg.userName
    rs_log!staff_name = G_Cfg.userFullName
    rs_log!logdatetime = Now()
    rs_log!logMessage = msg
    rs_log.Update
    
    insertLog = True
    
    
Finally:
    If Not rs_log Is Nothing Then
        If rs_log.State <> 0 Then rs_log.Close
         
        Set rs_log = Nothing
    End If
    
    
    If Not Conn Is Nothing Then
        Conn.closeDB
        Set Conn = Nothing
    End If
    
    Exit Function
errHandle:
    
    insertLog = False
    
    MsgBox Err.Description, vbCritical
    
    GoTo Finally
    
End Function



