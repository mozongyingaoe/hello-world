clsDAO.cls
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False

Const DOLOG = 0

Dim wrkCurrent As dao.Workspace
Dim dbCurrent As dao.Database

Dim mTrans As Boolean
Dim mLastSQL As String

Dim curUser As String

Dim mTmpLink As New Collection

Dim dbLink As String

Dim dbPwd As String

Dim dbPwd2 As String

Private Declare Function w32GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Property Get dbPath() As String
    dbPath = dbLink
End Property

Property Let dbPath(ByVal str As String)
    dbLink = str
End Property

Property Get dbPassword() As String
    dbPassword = dbPwd
End Property

Property Let dbPassword(ByVal str As String)
    dbPwd = str
End Property


Property Get LastSQL() As String
    LastSQL = mLastSQL
End Property


Property Let LastSQL(ByVal str As String)
    mLastSQL = str
    
    'LogText "C:\temp\CashRecon.txt", str
    
    If DOLOG Then
        On Error Resume Next
        
        Dim sqlStr  As String
        
        DoCmd.SetWarnings False
        
        sqlStr = "insert into AppLog (LogDt, LogType, UserId, LogText) values (" & _
                    "'" & Format(Now, "yyyy-MM-dd HH:mm:ss") & "', " & _
                    "'SQL', '" & curUser & "', " & _
                    "'" & Replace(str, "'", "''") & "')"
                    
        DoCmd.RunSQL sqlStr
        
        DoCmd.SetWarnings True
        
    End If
    
End Property

Public Function GetUserName() As String
Dim sTemp As String
Dim lReturn As Long
    
    sTemp = Space(50)
    
    lReturn = w32GetUserName(sTemp, Len(sTemp))
    GetUserName = Trim(Replace(sTemp, Chr(0), " "))
End Function

Public Function ExecuteSQL(ByVal sqlStr As String, ParamArray paras() As Variant) As Long
    Dim i As Integer
    Dim pos As Long
    
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    dbCurrent.Execute sqlStr
    
    ExecuteSQL = dbCurrent.RecordsAffected
    
End Function

Public Sub GetRecordsetForUpdate(ByVal sqlStr As String, ByRef rs As dao.Recordset, ParamArray paras() As Variant)
    Dim i As Integer
    Dim pos As Long
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If
    
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenDynaset)
    
End Sub

Public Sub GetDictionary(ByVal sqlStr As String, ByRef lst As Dictionary, ParamArray paras() As Variant)
    Dim i As Integer
    Dim pos As Long
    Dim rs As dao.Recordset
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If
    
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot)
    
    Set lst = New Dictionary
    
    Do While Not rs.EOF
    
        lst.Add CStr(IIf(IsNull(rs.Fields(0)), "", rs.Fields(0))), "1"
        
        rs.MoveNext
    Loop


    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If
    
End Sub

Public Sub GetCollection(ByVal sqlStr As String, ByRef lst As Collection, ParamArray paras() As Variant)
    Dim i As Integer
    Dim pos As Long
    Dim rs As dao.Recordset
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If
    
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot)
    
    Set lst = New Collection
    
    Do While Not rs.EOF
    
        lst.Add CStr(IIf(IsNull(rs.Fields(0)), "", rs.Fields(0)))
        
        rs.MoveNext
    Loop


    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If

End Sub

Public Sub openDB()
    Set dbCurrent = dao.OpenDatabase(dbLink, False, False, "MS Access;PWD=" & dbPwd)
End Sub


Public Sub GetRecordset(ByVal sqlStr As String, ByRef rs As dao.Recordset, ParamArray paras() As Variant)
    Dim i As Integer
    Dim pos As Long
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    If Not (rs Is Nothing) Then
        rs.Close
        Set rs = Nothing
    End If
    
    'Minnie @20160914
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot, dbReadOnly)
    'Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot)
End Sub


Public Function ExecuteScalar(ByVal sqlStr As String, ParamArray paras() As Variant) As Variant
    Dim i As Integer
    Dim pos As Long
    
    Dim rs As dao.Recordset
    
    If InStr(1, UCase(sqlStr), " TOP ") < 1 Then
            sqlStr = "SELECT TOP 1 " & mID(sqlStr, InStr(1, UCase(sqlStr), "SELECT") + 6)
    End If
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot)
    
    If Not rs.EOF Then
        If IsNull(rs.Fields(0).value) Then
            ExecuteScalar = Null
        Else
            ExecuteScalar = rs.Fields(0).value
        End If
    End If
    
    rs.Close
    Set rs = Nothing

End Function

Public Sub BeginTrans()
    If mTrans Then
        Err.Raise -999, "clsDAO.BeginTrans", "Transaction already began."
    End If
    
    wrkCurrent.BeginTrans
    mTrans = True
End Sub

Public Sub Commit()
    If Not mTrans Then
        Err.Raise -999, "clsDAO.Commit", "Transaction not started yet."
        Exit Sub
    End If
    
    wrkCurrent.CommitTrans
    mTrans = False
End Sub

Public Sub Rollback()
On Error Resume Next

    wrkCurrent.Rollback
    mTrans = False
End Sub

Public Sub closeDB()
On Error Resume Next

    If mTrans Then
        wrkCurrent.Rollback
    End If
    
    For Each n In mTmpLink
        dbCurrent.TableDefs.Delete n
    Next
    
    
    Set wrkCurrent = Nothing
    Set dbCurrent = Nothing
End Sub

Private Sub Class_Initialize()
    'openDB
    Set wrkCurrent = DBEngine.Workspaces(0)
   ' Set dbCurrent = Application.CurrentDb
    
    curUser = GetUserName
    
    
    mTrans = False
End Sub

Private Sub Class_Terminate()
    closeDB
End Sub




Public Sub ExportTableToFile(ByVal tableName As String, ByVal fileName As String, ByVal def As String)
    Dim sqlStr As String
    
'    sqlStr = "select * into " & _
'        " [text;hdr=yes;" & def & "; database=" & FileFolder(fileName) & "].[" & ExtractFileName(fileName, True) & "]" & _
'        " from " & tableName
'
'    dbCurrent.Execute sqlStr
    'DoCmd.RunSQL sqlStr
End Sub

Public Sub CreateLinkTable(ByVal fname As String, ByVal def As String)
'Dim tblDef As TableDef
'Dim n As String
'
'n = ExtractFileName(fname, False)
'
'
'For Each tblDef In dbCurrent.TableDefs
'    If tblDef.Name = n Then
'        Err.Raise -999, "clsDAO.CreateLinkTable", "FileName: " & n & " already existed!"
'        Exit Sub
'    End If
'Next
'
'
'Set tblDef = dbCurrent.CreateTableDef(n)
'
'tblDef.Connect = "TEXT;" & def & ";Database=" & FileFolder(fname)
'tblDef.SourceTableName = ExtractFileName(fname, True)
'
'
'dbCurrent.TableDefs.Append tblDef
'
'mTmpLink.Add n


End Sub



Public Function List(ByVal sqlStr As String, ParamArray paras() As Variant) As String
    Dim i As Integer
    Dim pos As Long
    
    Dim rs As dao.Recordset
    
    If InStr(1, UCase(sqlStr), " TOP ") < 1 Then
            sqlStr = "SELECT TOP 10 " & mID(sqlStr, InStr(1, UCase(sqlStr), "SELECT") + 6)
    End If
    
    pos = 0
        
    If IsArray(paras) Then
        For i = 0 To UBound(paras)
            pos = InStr(pos + 1, sqlStr, "?")
            
            If pos > 0 Then
                sqlStr = Left(sqlStr, pos - 1) & Replace(paras(i), "'", "''") & mID(sqlStr, pos + 1)
            End If
        Next i
    End If
    
    LastSQL = sqlStr
    
    Set rs = dbCurrent.OpenRecordset(sqlStr, dbOpenSnapshot)
    
    List = ""
    
    Do While Not rs.EOF
        If Not IsNull(rs.Fields(0).value) Then
            List = List & "," & rs.Fields(0).value
        End If
        
        rs.MoveNext
    Loop
    
    rs.Close
    Set rs = Nothing
    
    If List <> "" Then
        List = mID(List, 2)
    End If
    

End Function

Function DropTable(ByVal TargetName As String) As Boolean
On Error GoTo errHandle

dbCurrent.TableDefs.Delete TargetName

DropTable = True

Exit Function

errHandle:
DropTable = False


End Function


Function CopyTableDef(ByVal SrcName As String, TargetName As String) As Integer

Dim SI As Index, SF As Field, SP As Property
Dim t As TableDef, i As Index, f As Field, P As Property
Dim I1 As Integer, f1 As Integer, P1 As Integer

Dim SourceTableDef As TableDef


Set SourceTableDef = dbCurrent.TableDefs(SrcName)


  If SourceTableDef.Attributes And dbAttachedODBC Or SourceTableDef.Attributes And dbAttachedTable Then
    CopyTableDef = False
    Exit Function
  End If
  Set t = dbCurrent.CreateTableDef(TargetName)
  ' Copy Jet Properties
    On Error Resume Next
    For P1 = 0 To t.Properties.Count - 1
      If t.Properties(P1).Name <> "Name" Then
        t.Properties(P1).value = SourceTableDef.Properties(P1).value
      End If
    Next P1
    On Error GoTo 0
  ' Copy Fields
    For f1 = 0 To SourceTableDef.Fields.Count - 1
      Set SF = SourceTableDef.Fields(f1)
      If (SF.Attributes And dbSystemField) = 0 Then   ' DAO 3.0 and higher ****
        Set f = t.CreateField()
        ' Copy Jet Properties
          On Error Resume Next
          For P1 = 0 To f.Properties.Count - 1
            f.Properties(P1).value = SF.Properties(P1).value
          Next P1
          On Error GoTo 0
        t.Fields.Append f
      End If ' Corresponding End If ****
    Next f1
  ' Copy Indexes
    For I1 = 0 To SourceTableDef.Indexes.Count - 1
      Set SI = SourceTableDef.Indexes(I1)
      If Not SI.Foreign Then         ' Foreign indexes are added by relationships
        Set i = t.CreateIndex()
        ' Copy Jet Properties
          On Error Resume Next
          For P1 = 0 To i.Properties.Count - 1
            i.Properties(P1).value = SI.Properties(P1).value
          Next P1
          On Error GoTo 0
        ' Copy Fields
          For f1 = 0 To SI.Fields.Count - 1
            Set f = t.CreateField(SI.Fields(f1).Name, t.Fields(SI.Fields(f1).Name).Type)
            i.Fields.Append f
          Next f1
        t.Indexes.Append i
      End If
    Next I1
' Append TableDef
  dbCurrent.TableDefs.Append t
  ' Copy Access/User Table Properties
    For P1 = t.Properties.Count To SourceTableDef.Properties.Count - 1
      Set SP = SourceTableDef.Properties(P1)
      Set P = t.CreateProperty(SP.Name, SP.Type)
      P.value = SP.value
      t.Properties.Append P
    Next P1
  ' Copy Access/User Field Properties
    For f1 = 0 To t.Fields.Count - 1
      Set SF = SourceTableDef.Fields(f1)
      Set f = t.Fields(f1)
      For P1 = f.Properties.Count To SF.Properties.Count - 1
        Set SP = SF.Properties(P1)
        Set P = f.CreateProperty(SP.Name, SP.Type)
        P.value = SP.value
        f.Properties.Append P
      Next P1
    Next f1
  ' Copy Access/User Index Properties
    For I1 = 0 To t.Indexes.Count - 1
      Set SI = SourceTableDef.Indexes(t.Indexes(I1).Name)
      If Not SI.Foreign Then      ' don't copy foreign indexes - they're created by relationships
        Set i = t.Indexes(I1)
        For P1 = i.Properties.Count To SI.Properties.Count - 1
          Set SP = SI.Properties(P1)
          Set P = i.CreateProperty(SP.Name, SP.Type)
          P.value = SP.value
          i.Properties.Append P
        Next P1
      End If
    Next I1
  CopyTableDef = True
End Function


Public Sub createTable(ByVal table_Name As String, rs_cfg As ADODB.Recordset)
Dim tb As TableDef, f As dao.Field
Set tb = dbCurrent.CreateTableDef(table_Name)

Do While Not rs_cfg.EOF

With tb
    
    Select Case True
        
        Case UCase(rs_cfg!Type.value) Like "DATE*"
        
            Set f = tb.CreateField(rs_cfg!Field_Name_Internal, dbDate, 255)
        
        Case UCase(rs_cfg!Type.value) Like "NUMBER*"
        
            Set f = tb.CreateField(rs_cfg!Field_Name_Internal, dbDouble, 255)
            
        Case Else
            
            If IsNumeric(Split(Split(rs_cfg!Type, "(")(1), ")")(0)) Then
            
                If CLng(Split(Split(rs_cfg!Type, "(")(1), ")")(0)) > 255 Then
            
                    Set f = tb.CreateField(rs_cfg!Field_Name_Internal, dbMemo, 0)
                    
                    
                Else
                
                    Set f = tb.CreateField(rs_cfg!Field_Name_Internal, dbText, 255)
                End If
                f.AllowZeroLength = True
                ' f.Properties("UnicodeCompression") = True
            End If
            
        

    End Select
    

    .Fields.Append f
  
    rs_cfg.MoveNext
        
End With





Loop

dbCurrent.TableDefs.Append tb

End Sub


Public Sub getTableFieldsAttribute(ByVal table_Name As String, rng As Range)

On Error Resume Next

Dim f As dao.Field
With dbCurrent.TableDefs(table_Name)
    
    For Each f In .Fields
        
        rng.value = f.Name
        For Each pr In f.Properties
            rng.Offset(0, 1).value = pr.Name
            rng.Offset(1, 1).value = pr.value
           
            Set rng = rng.Offset(0, 1)
            
        Next
        Set rng = rng.Offset(2, -rng.Column + 1)
    Next
End With

On Error GoTo 0
End Sub


