Form_MainForm.cls
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Form_MainForm"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Private Const PROCESS_KEYWORD = "PROCESS"
Private Const REPORT_KEYWORD = "REPORT"

Private clsPerformImport As clsImport

Private Sub CommandOpenProcessOutputFolder_Click()

    If Not IsNull(Text_Process_OutputPath.Value) Then
        If Text_Process_OutputPath.Value <> "" Then
            If Len(Dir(Text_Process_OutputPath.Value, vbDirectory)) = 0 Then
                MsgBox ("ERROR! Invalid Processs Output Folder")
            Else
                Application.FollowHyperlink Text_Process_OutputPath.Value
            End If
        End If
    Else
        MsgBox ("ERROR! Processs Output Folder is EMPTY")
    End If
    
End Sub

Private Sub CommandOpenProcessSourceFolder_Click()

    If Not IsNull(Text_Process_SourcePath.Value) Then
        If Text_Process_SourcePath.Value <> "" Then
            If Len(Dir(Text_Process_SourcePath.Value, vbDirectory)) = 0 Then
                MsgBox ("ERROR! Invalid Processs Source Folder")
            Else
                Application.FollowHyperlink Text_Process_SourcePath.Value
            End If
        End If
    Else
        MsgBox ("ERROR! Processs Source Folder is EMPTY")
    End If
    
End Sub

Private Sub CommandOpenReportOutputFolder_Click()

    If Not IsNull(Text_Report_OutputPath.Value) Then
        If Text_Report_OutputPath.Value <> "" Then
            If Len(Dir(Text_Report_OutputPath.Value, vbDirectory)) = 0 Then
                MsgBox ("ERROR! Invalid Report Output Folder")
            Else
                Application.FollowHyperlink Text_Report_OutputPath.Value
            End If
        End If
    Else
        MsgBox ("ERROR! Report Output Folder is EMPTY")
    End If
    
End Sub

Private Sub Form_Open(Cancel As Integer)

On Error GoTo errHandler

    Dim tempIndex As Integer
    Dim tempStr As String
    Dim tempStr2 As String
    Dim tempStrArr() As String
        
    If SysCmd(acSysCmdRuntime) Then
        MsgBox ("Microsoft Access Runtime is used. Please make sure Microsoft Access is installed!")
        Application.Quit
    End If
    
    If Command = "" Then

        tempStr = getStringFromINI("Common", "LocalScheme", CurrentProject.path & "\GenericMain.ini")
        tempStr2 = getStringFromINI("Common", "LocalParameter", CurrentProject.path & "\GenericMain.ini")
        
        If tempStr <> "" Then
            Me.Label_SchemeName.Caption = tempStr
        Else
            MsgBox ("No Command Line Args is found!")
            Application.Quit
        End If

        If tempStr2 <> "" Then
            Me.Label_History.Caption = "'" & tempStr2 & "'"
        Else
            Me.Label_History.Caption = "Process Histroy"
        End If
       
    Else
        
        tempStrArr = Split(Trim(Command), " ")
        
        Me.Label_SchemeName.Caption = tempStrArr(0)
        
        If UBound(tempStrArr) >= 1 Then
            Me.Label_History.Caption = tempStrArr(1)
        End If
        
    End If
    
    ModuleFolderStr = getStringFromINI(Me.Label_SchemeName.Caption, "ModuleFolder", CurrentProject.path & "\GenericMain.ini")
    
    LoadingModuleStr = getStringFromINI("Common", "LoadingModule", CurrentProject.path & "\GenericMain.ini")
    Me.Label_SchemeVersion.Caption = LoadingModuleStr
    
    'Call getALLFormConfig
    If LoadingModuleStr = "Y" Then
    
        tempStr = getStringFromINI(Me.Label_SchemeName.Caption, "NumOfCustForm", CurrentProject.path & "\GenericMain.ini")
        If tempStr = "" Or Not IsNumeric(tempStr) Then
            G_NumOfCustForm = 0
        Else
            G_NumOfCustForm = CInt(tempStr)
        End If
        
        For tempIndex = 1 To G_NumOfCustForm
        
            tempStr = getStringFromINI(Me.Label_SchemeName.Caption, "CustForm_" & tempIndex, CurrentProject.path & "\GenericMain.ini")
            tempStrArr = Split(tempStr, ";")
            G_CustForm_Path = ModuleFolderStr & tempStrArr(0)
            G_CustForm_Name = tempStrArr(1)
        
            If LoadFromText("acForm", G_CustForm_Name, G_CustForm_Path) = False Then
                GoTo errHandler
            End If
            
            DoCmd.RunCommand acCmdCompileAndSaveAllModules
        Next
        
    End If
        
   Call SetALLControls
             
finally:
        
    Exit Sub
    
errHandler:

    MsgBox ("Form_Open Error! " & vbNewLine & Err.Description)
    Application.Quit

End Sub

Private Sub Form_Load()

On Error GoTo errHandler
    
    Dim tempIndex As Integer

    Set G_AccessGroupList = Nothing
    whereLogClause = ""
    
    ExecutableStr = getStringFromINI("Common", "Executable", CurrentProject.path & "\GenericMain.ini")

    If ExecutableStr = "Y" Then

        DoCmd.NavigateTo "Custom"
        DoCmd.RunCommand acCmdWindowHide
        DoCmd.ShowToolbar "Ribbon", acToolbarNo

        CurrentDb.Properties("AllowFullMenus") = False
        CurrentDb.Properties("AllowShortcutMenus") = False

        CurrentDb.Properties("AllowByPassKey") = False
        CurrentDb.Properties("AllowSpecialKeys") = False

        CurrentDb.Properties("AllowFullMenus") = False

        'Disable Menu
        For tempIndex = 1 To CommandBars.Count
            CommandBars(tempIndex).Enabled = False
        Next tempIndex

    Else

        DoCmd.NavigateTo "Custom"
        DoCmd.SelectObject acForm, , True
        DoCmd.ShowToolbar "Ribbon", acToolbarYes

        CurrentDb.Properties("AllowFullMenus") = True
        CurrentDb.Properties("AllowShortcutMenus") = True

        CurrentDb.Properties("AllowByPassKey") = True
        CurrentDb.Properties("AllowSpecialKeys") = True

        CurrentDb.Properties("AllowFullMenus") = True

        'Enable Menu
        For tempIndex = 1 To CommandBars.Count
            CommandBars(tempIndex).Enabled = True
        Next tempIndex

    End If
    
    G_SchemeID = Me.Label_SchemeName.Caption
    
    If Me.Label_History.Caption <> "Process Histroy" Then
        G_Parameter = Me.Label_History.Caption
        Me.Label_History.Caption = "Process Histroy"
    Else
        G_Parameter = ""
    End If
    
    LoadingModuleStr = Me.Label_SchemeVersion.Caption
    
    ModuleFolderStr = getStringFromINI(G_SchemeID, "ModuleFolder", CurrentProject.path & "\GenericMain.ini")

    If Not G_Scheme.sub_LoadConfig Then
        GoTo errHandler
    End If
    
    Me.Label_SchemeName.Caption = G_SchemeName
    Me.Label_SchemeVersion.Caption = G_SchemeVersion
    
    'ReloadALLModule
    If LoadingModuleStr = "Y" Then
        If Not ReloadALLModule Then
            GoTo errHandler
        End If
    End If
    
    
    If G_Parameter = "" Then
        G_DB.GetRecordset "SELECT a.* from [_Sec_User] as a inner join [_Configuration] as b on a.[AccessGroup] = b.[AccessGroup] where [Userid] = '" & G_USERID & "'", G_tempRS
    Else
        G_DB.GetRecordset "SELECT a.* from [_Sec_User] as a inner join [_Configuration] as b on a.[AccessGroup] = b.[AccessGroup] where [Userid] = '" & G_USERID & "' and a.[AccessGroup] in (" & G_Parameter & ")", G_tempRS
    End If
    
        Do Until G_tempRS.EOF
            If G_DB.fieldExists(G_tempRS, "ExpiryDate") Then
                If IsNull(G_tempRS("ExpiryDate")) Then
                    If Not itemExistsInCollection(G_AccessGroupList, G_tempRS("AccessGroup")) Then
                        G_AccessGroupList.Add (G_tempRS("AccessGroup"))
                    End If
                Else
                    If DateDiff("s", Now(), CDate(G_tempRS("ExpiryDate"))) > 0 Then
                        If Not itemExistsInCollection(G_AccessGroupList, G_tempRS("AccessGroup")) Then
                            G_AccessGroupList.Add (G_tempRS("AccessGroup"))
                        End If
                    End If
                End If
            Else
                If Not itemExistsInCollection(G_AccessGroupList, G_tempRS("AccessGroup")) Then
                    G_AccessGroupList.Add (G_tempRS("AccessGroup"))
                End If
            End If
            
            G_tempRS.MoveNext
        Loop
    
        If G_AccessGroupList.Count = 0 Then
            MsgBox ("No Access Right has been granted! Please contact application admin!")
            Application.Quit
        End If
    
    
        G_tempSQL = "Select * from [_configuration] where [configtype] like 'P-%' and [AccessGroup] in ("
        
        For tempIndex = 1 To G_AccessGroupList.Count
            G_tempSQL = G_tempSQL + "'" & G_AccessGroupList(tempIndex) & "',"
        Next
    
    G_tempSQL = Left(G_tempSQL, Len(G_tempSQL) - 1) & ")"

    
    G_DB.GetRecordset G_tempSQL, gRS_Process
    
        If Not gRS_Process.EOF Then
            
            gRS_Process.Sort = "configtype"
            
            Me.Combo_Process.RowSource = ""
            
                Do While Not gRS_Process.EOF
                    'Fix the Issue of Description includes ","
                    Me.Combo_Process.AddItem "'" & CStr(gRS_Process.Fields(1)) & "'"
                    whereLogClause = whereLogClause & "([Process]='PROCESS' and [SubProcess]='" & Split(gRS_Process.Fields(0), "-")(2) & "') or "
                    gRS_Process.MoveNext
                Loop
            
            Me.Combo_Process.Value = Me.Combo_Process.ItemData(0)
            Call Combo_Process_Change
            
            TabCtl.Pages("Main Process").Visible = True
            
        Else
        
            TabCtl.Pages("Main Process").Visible = False
            
        End If
    
    
    G_tempSQL = "Select * from [_configuration] where [configtype] like 'R-%' and [AccessGroup] in ("
    
        For tempIndex = 1 To G_AccessGroupList.Count
            G_tempSQL = G_tempSQL + "'" & G_AccessGroupList(tempIndex) & "',"
        Next
    
     G_tempSQL = Left(G_tempSQL, Len(G_tempSQL) - 1) & ")"

    
    G_DB.GetRecordset G_tempSQL, gRS_Report
    
        If Not gRS_Report.EOF Then
            
            gRS_Report.Sort = "configtype"
            
            Me.Combo_Report.RowSource = ""
            
                Do While Not gRS_Report.EOF
                    'Fix the Issue of Description includes ","
                    Me.Combo_Report.AddItem "'" & gRS_Report.Fields(1) & "'"
                    whereLogClause = whereLogClause & "([Process]='REPORT' and [SubProcess]='" & Split(gRS_Report.Fields(0), "-")(2) & "') or "
                    gRS_Report.MoveNext
                Loop
            
            Me.Combo_Report.Value = Me.Combo_Report.ItemData(0)
            Call Combo_Report_Change
            
            TabCtl.Pages("Reporting").Visible = True
            
        Else
        
            TabCtl.Pages("Reporting").Visible = False
            
        End If
    
    
        If TabCtl.Pages("Main Process").Visible = True Then
            Combo_Process.SetFocus
        Else
            Combo_Report.SetFocus
        End If
    
    If whereLogClause <> "" Then
        whereLogClause = "WHERE " & Mid(whereLogClause, 1, Len(whereLogClause) - 4)
    End If
    
    Call G_DB.GetRecordset("SELECT top " & G_HistoryDisplay & " * from [_log] " & whereLogClause & " order by updatedatetime desc", G_tempRS)
    Set Log_subform.Form.Recordset = G_tempRS
    
    'Disable sorting / filtering for subform
    Form_MainForm.Form.ShortcutMenu = False
    
    Form_MainForm.Log_subform.Form.AllowFilters = False
    Form_MainForm.Import_File_subForm.Form.AllowFilters = False
    
    Form_MainForm.Log_subform.Form.ShortcutMenu = False
    Form_MainForm.Import_File_subForm.Form.ShortcutMenu = False
    
    'Auto Fill for Log_subfrom
    For tempIndex = 0 To Form_MainForm.Log_subform.Form.Controls.Count - 1
        If Not TypeOf Form_MainForm.Log_subform.Form.Controls(tempIndex) Is Label Then
            Form_MainForm.Log_subform.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
        End If
    Next tempIndex
    
    'Auto Fill for Import_File_subForm
    For tempIndex = 0 To Form_MainForm.Import_File_subForm.Form.Controls.Count - 1
        If Not TypeOf Form_MainForm.Import_File_subForm.Form.Controls(tempIndex) Is Label Then
            Form_MainForm.Import_File_subForm.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
        End If
    Next tempIndex
    
finally:

    SysCmd acSysCmdClearStatus
    DoEvents
        
    Exit Sub
    
errHandler:

    MsgBox ("Cannot Load Config Setup for Scheme ID - " & G_SchemeID & vbNewLine & Err.Description)
    Application.Quit

End Sub

Private Sub Command_Process_Click()

    Dim tempDate As Date
    Dim tempIndex As Integer
    
    mCurrentSubProcess = ""
    mLibrary = ""
    mClass = ""
    
    ProcessLockGroup = ""
    processMessage = ""

On Error GoTo errHandle

    EnableALLControls (False)
    
    Set msgBoxArrayList = Nothing
    Set messageArrayList = Nothing
    Set validatedSourceFileArrayList = Nothing
    Set tempLinkFileArrayList = Nothing
    Set exportFileRepositoryArrayList = Nothing
    
    Set G_xls = New clsExcelHelper
        
    processStartTime = Now
    
    tempGenerationDate = Format(Text_Process_GenerationDate.Value, "yyyyMMdd")
     
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Started - [" & gRS_Process("Description") & "]")
    Sleep (1000)
                    
    'Show the progress bar
    SysCmd acSysCmdInitMeter, "[Process] Process Start .....", 100
    SysCmd acSysCmdUpdateMeter, 0
    DoEvents
        
        If Not IsNull(Text_Process_SourcePath.Value) Then
            If Text_Process_SourcePath.Value <> "" Then
                    tempSourcePath = IIf(Right(Trim(Me.Text_Process_SourcePath.Value), 1) = "\", Trim(Me.Text_Process_SourcePath.Value), Trim(Me.Text_Process_SourcePath.Value) & "\")
                    Me.Text_Process_SourcePath.Value = tempSourcePath
            End If
        End If
        
        If Not IsNull(Text_Process_OutputPath.Value) Then
            If Text_Process_OutputPath.Value <> "" Then
                    defaultOutputPath = IIf(Right(Trim(Me.Text_Process_OutputPath.Value), 1) = "\", Trim(Me.Text_Process_OutputPath.Value), Trim(Me.Text_Process_OutputPath.Value) & "\")
                    Me.Text_Process_OutputPath.Value = defaultOutputPath
            End If
        End If
        
    gRS_Process.MoveFirst
    
        Do While Not gRS_Process.EOF
        
            If gRS_Process("Description") = Form_MainForm.Combo_Process.Value Then
                
                mCurrentSubProcess = Mid(gRS_Process("configtype"), 5)
                mLibrary = IIf(IsNull(gRS_Process("configLibrary")), "", gRS_Process("configLibrary"))
                mClass = gRS_Process("configClass")
                hideProcessMessage = gRS_Process("HideProcessMessage")
                
                If G_DB.fieldExists(gRS_Process, "ProcessLockGroup") Then
                    If IsNull(gRS_Process("ProcessLockGroup")) Then
                       ProcessLockGroup = ""
                    Else
                       ProcessLockGroup = gRS_Process("ProcessLockGroup")
                    End If
                End If
                               
                Exit Do
                
            End If
            
            gRS_Process.MoveNext
            
        Loop
    
    tempPath = IIf(Right(Trim(G_TempPath), 1) = "\", Trim(G_TempPath), Trim(G_TempPath) & "\")
    tempLocalSourcePath = tempPath & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & "\"
    CreateFolder (tempPath)
    CreateFolder (tempLocalSourcePath)
    
        If txtPathEnabled = True Then
            If IsNull(Text_Process_SourcePath.Value) Then
                
                msgBoxArrayList.Add ("Invalid Process Soure Path.")
                messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Process Soure Path.")
                processMessage = "Process Failed - Processing Time : "
                GoTo finally
            ElseIf Len(Dir(Text_Process_SourcePath.Value, vbDirectory)) = 0 Then
                
                msgBoxArrayList.Add ("Process Source Path does not exist.")
                messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Soure Path does not exist.")
                processMessage = "Process Failed - Processing Time : "
                 GoTo finally
            End If
        End If
        
        If txtOutputPathEnabled = True Then
            If IsNull(Text_Process_OutputPath.Value) Then
                
                msgBoxArrayList.Add ("Invalid Process Output Path.")
                messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Process Output Path.")
                processMessage = "Process Failed - Processing Time : "
                GoTo finally
            ElseIf Len(Dir(Text_Process_OutputPath.Value, vbDirectory)) = 0 Then
                
                msgBoxArrayList.Add ("Process Output Path does not exist.")
                messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Output Path does not exist.")
                processMessage = "Process Failed - Processing Time : "
                GoTo finally
            End If
        End If
    
        If mCurrentSubProcess = "" Or mClass = "" Then
            
            msgBoxArrayList.Add ("Setup issue and please contact application admin asap.")
            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Setup issue")
            GoTo finally
        End If
    
    G_DB.GetRecordset "Select top 1 * from [_Main_Lock]", gRS_Lock
    
        If isMultiUser Then
            
            If ProcessLockGroup = "" Then
            
                islockedBy = G_DB.ExecuteScalar("Select [UserId] from [_Main_Lock]")
                lockTime = G_DB.ExecuteScalar("Select [Datetime] from [_Main_Lock]")
                
                If islockedBy <> "" And islockedBy <> G_USER.Userid Then
                    If DateDiff("s", lockTime, Now) > lockTimeOut Then
                        Call clearDB
                        Call lockDB
                    Else
                        
                        msgBoxArrayList.Add ("Process Cancelled - The Database is locked by [" & islockedBy & "] since [" & lockTime & "] , Please retry later!")
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Cancelled - The Database is locked by [" & islockedBy & "] since [" & lockTime & "] , Please retry later!")
                        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Failed")
                        GoTo finally
                    End If
                Else
                    If islockedBy = G_USER.Userid Then
                        Call releaseDB
                    End If
                
                    Call lockDB
                End If
            
            Else
            
               If Not G_DB.fieldExists(gRS_Process, "ProcessLockGroup") Then
                    
                    msgBoxArrayList.Add ("Configuration Error : [ProcessLockGroup] Column is missing in Table [_Main_Lock]! Please contact application admin asap!")
                    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Configuration Error : [ProcessLockGroup] Column is missing in Table [_Main_Lock]! Please contact application admin asap!")
                    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Failed")
                    GoTo finally
                End If
            
                islockedBy = G_DB.ExecuteScalar("Select [UserId] from [_Main_Lock] where [ProcessLockGroup] = '" & ProcessLockGroup & "'")
                lockTime = G_DB.ExecuteScalar("Select [Datetime] from [_Main_Lock] where [ProcessLockGroup] = '" & ProcessLockGroup & "'")
    
                    If islockedBy <> "" And islockedBy <> G_USER.Userid Then
                        If DateDiff("s", lockTime, Now) > lockTimeOut Then
                            Call clearProcGrpDB(ProcessLockGroup)
                            Call lockProcGrpDB(ProcessLockGroup)
                        Else
                            msgBoxArrayList.Add ("Process Cancelled - The Database is locked by [" & islockedBy & "] since [" & lockTime & "] , Please retry later!")
                            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Cancelled - The Database is locked by [" & islockedBy & "] since [" & lockTime & "] , Please retry later!")
                            processMessage = "Process Failed - Processing Time : "
                            GoTo finally
                        End If
                    Else
                        If islockedBy = G_USER.Userid Then
                            Call releaseProcGrpDB(ProcessLockGroup)
                        End If
    
                        Call lockProcGrpDB(ProcessLockGroup)
    
                    End If
            
            End If
        Else
            'No Lock is required
        End If
    
    CreateFolder (G_RepositoryPath & G_SchemeID & "\Import\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd"))
    CreateFolder (G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd"))
    
        If isTransaction Then
            G_DB.BeginTrans
        End If
    
    
    '################### ReImport ############################
    If G_DB.fieldExists(gRS_Process, "ReImport") Then
    
        If gRS_Process("ReImport") Then
    
            SysCmd acSysCmdUpdateMeter, 20
            SysCmd acSysCmdInitMeter, "[Process] Executing ReImport Logic(s) .....", 100
            DoEvents

                If Not Run(mClass & "_" & "ReImport") Then
                
                    If isTransaction Then
                        G_DB.Rollback
                    End If
                    
                    processMessage = "Process Failed - Processing Time : "
                    GoTo finally
                End If
            
            SysCmd acSysCmdUpdateMeter, 30
            SysCmd acSysCmdInitMeter, "[Process] Importing Source File(s) .....", 100
            DoEvents
        
        End If
    
    End If
    
    '################### Import File ############################
    Set clsPerformImport = New clsImport

        If Not clsPerformImport.fnImport Then
                If isTransaction Then
                    G_DB.Rollback
                End If
                
                processMessage = "Process Failed - Processing Time : "
                Set clsPerformImport = Nothing
                GoTo finally
            Else
                Set clsPerformImport = Nothing
        End If
        
    SysCmd acSysCmdUpdateMeter, 70
    SysCmd acSysCmdInitMeter, "[Process] Executing ExecuteTask Logic(s) .....", 100
    DoEvents
   
    '################### Execute Tasks ############################
    
        If Run(mClass & "_" & "ExecuteTask") Then
        
            If isTransaction Then
                G_DB.Commit
            End If
            
            processMessage = "Process Completed - Processing Time : "
            
        Else
        
            If isTransaction Then
                G_DB.Rollback
            End If
            
            processMessage = "Process Failed - Processing Time : "
            
        End If
        
backup:
        
    SysCmd acSysCmdInitMeter, "[Process] Backup File(s) .....", 100
    SysCmd acSysCmdUpdateMeter, 90
    DoEvents
    
    If processMessage = "Process Completed - Processing Time : " Then
        Call zipfiles(validatedSourceFileArrayList, G_RepositoryPath & G_SchemeID & "\Import\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd") & "\P_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, False)
        Call zipfiles(exportFileRepositoryArrayList, G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd") & "\P_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, False)
    Else
        Call zipfiles(validatedSourceFileArrayList, G_RepositoryPath & G_SchemeID & "\Import\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd") & "\P_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, True)
        Call zipfiles(exportFileRepositoryArrayList, G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Process_GenerationDate.Value, "yyyyMMdd") & "\P_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, True)
    End If
    
finally:
    
    Call RemoveFolder(tempLocalSourcePath)
    
    For tempIndex = 1 To tempLinkFileArrayList.Count
        If (Len(Dir(tempLinkFileArrayList(tempIndex))) > 0) Then
            Kill tempLinkFileArrayList(tempIndex)
        End If
    Next
    
    If isMultiUser Then
        If ProcessLockGroup = "" Then
            Call releaseDB
        ElseIf ProcessLockGroup <> "" And G_DB.fieldExists(gRS_Lock, "ProcessLockGroup") Then
            Call releaseProcGrpDB(ProcessLockGroup)
        End If
    End If
            
    Sleep (1000)
    messageArrayList.Add Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & processMessage & Format(Now - processStartTime, "hh:mm:ss")
            
    Call sub_InsertActionLog(PROCESS_KEYWORD, mCurrentSubProcess, Format(Text_Process_GenerationDate.Value, "yyyyMMdd"), messageArrayList)
    
    Call G_DB.GetRecordset("SELECT top " & G_HistoryDisplay & " * from [_log] " & whereLogClause & " order by updatedatetime desc", G_tempRS)
    Set Log_subform.Form.Recordset = G_tempRS
    
    Call G_DB.GetRecordset("SELECT * FROM [_Import_File] where [Process] = '" & mCurrentSubProcess & "' and type ='IMPORT' and [HiddenFile] = false order by [Seq]", G_tempRS)
    Set Import_File_subForm.Form.Recordset = G_tempRS
    
    'Auto Fill for Log_subfrom
    For tempIndex = 0 To Form_MainForm.Log_subform.Form.Controls.Count - 1
        If Not TypeOf Form_MainForm.Log_subform.Form.Controls(tempIndex) Is Label Then
            Form_MainForm.Log_subform.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
        End If
    Next tempIndex
    
    'Auto Fill for Import_File_subForm
    For tempIndex = 0 To Form_MainForm.Import_File_subForm.Form.Controls.Count - 1
        If Not TypeOf Form_MainForm.Import_File_subForm.Form.Controls(tempIndex) Is Label Then
            Form_MainForm.Import_File_subForm.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
        End If
    Next tempIndex
            
    SysCmd acSysCmdUpdateMeter, 100
    SysCmd acSysCmdInitMeter, "[Process] " & Trim(Split(messageArrayList(messageArrayList.Count), "||")(1)), 100
    DoEvents
    
    Set G_xls = Nothing
    
    EnableALLControls (True)
    
    If Not hideProcessMessage Then
        msgBoxArrayList.Add Trim(Split(messageArrayList(messageArrayList.Count), "||")(1))
        Call showMessageBoxStr(msgBoxArrayList)
    End If
   
    SysCmd acSysCmdClearStatus
    DoEvents
    

    
    Exit Sub
    
errHandle:
    
    MsgBox (Err.Description)
    
        If isTransaction Then
            G_DB.Rollback
        End If
    
    processMessage = "Process Failed - Processing Time : "
    GoTo finally
    
End Sub

Private Sub Command_Export_Click()
    
    Dim tempDate As Date
    Dim tempIndex As Integer
    
    mCurrentSubProcess = ""
    mLibrary = ""
    mClass = ""
    processMessage = ""
    

On Error GoTo errHandle

    EnableALLControls (False)
        
    Set msgBoxArrayList = Nothing
    Set messageArrayList = Nothing
    Set exportFileRepositoryArrayList = Nothing
    
    Set G_xls = New clsExcelHelper
        
    processStartTime = Now

    tempGenerationDate = Format(Text_Report_GenerationDate.Value, "yyyyMMdd")
    
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Process Started - [" & gRS_Report("Description") & "]")
        
    'Show the progress bar
    SysCmd acSysCmdInitMeter, "Process Start .....", 100
    SysCmd acSysCmdUpdateMeter, 0
    DoEvents
    
    If Not IsNull(Text_Report_OutputPath.Value) Then
        If Text_Report_OutputPath.Value <> "" Then
                defaultOutputPath = IIf(Right(Trim(Me.Text_Report_OutputPath.Value), 1) = "\", Trim(Me.Text_Report_OutputPath.Value), Trim(Me.Text_Report_OutputPath.Value) & "\")
                Me.Text_Report_OutputPath.Value = defaultOutputPath
        End If
    End If
    
    
    gRS_Report.MoveFirst
    
    Do While Not gRS_Report.EOF
    
        If gRS_Report("Description") = Form_MainForm.Combo_Report.Value Then
            
            mCurrentSubProcess = Mid(gRS_Report("configtype"), 5)
            mLibrary = IIf(IsNull(gRS_Report("configLibrary")), "", gRS_Report("configLibrary"))
            mClass = gRS_Report("configClass")
            hideProcessMessage = gRS_Report("HideProcessMessage")
                           
            Exit Do
            
        End If
        
        gRS_Report.MoveNext
        
    Loop
    
    If txtRptOutputPathEnabled = True Then
    
        If IsNull(Text_Report_OutputPath.Value) Then
        
            msgBoxArrayList.Add ("Invalid Report Output Path.")
            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Invalid Report Output Path.")
            processMessage = "Process Failed - Processing Time : "
            GoTo finally
            
        ElseIf Len(Dir(Text_Report_OutputPath.Value, vbDirectory)) = 0 Then
        
            msgBoxArrayList.Add ("Report Output Path does not exist.")
            messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Report Output Path does not exist.")
            processMessage = "Process Failed - Processing Time : "
            GoTo finally
            
        End If
    End If
    
    If mCurrentSubProcess = "" Or mClass = "" Then
        
        msgBoxArrayList.Add ("Setup issue and please contact application admin asap.")
        messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & "Setup issue")
        Exit Sub
        
    End If
    
    CreateFolder (G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Report_GenerationDate.Value, "yyyyMMdd"))

    SysCmd acSysCmdUpdateMeter, 50
    SysCmd acSysCmdInitMeter, "[Report] Executing ExecuteTask Logic(s) .....", 100
    DoEvents
    
    If Run(mClass & "_" & "ExecuteTask") Then
        processMessage = "Process Completed - Processing Time : "
    Else
        processMessage = "Process Failed - Processing Time : "
    End If
  
backup:
    
    SysCmd acSysCmdInitMeter, "[Process] Backup File(s) .....", 100
    SysCmd acSysCmdUpdateMeter, 80
    DoEvents
    
    If processMessage = "Process Completed - Processing Time : " Then
        Call zipfiles(exportFileRepositoryArrayList, G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Report_GenerationDate.Value, "yyyyMMdd") & "\R_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, False)
    Else
        Call zipfiles(exportFileRepositoryArrayList, G_RepositoryPath & G_SchemeID & "\Export\" & Format(Text_Report_GenerationDate.Value, "yyyyMMdd") & "\R_" & mCurrentSubProcess & "_" & G_USERID & "_" & Format(Now, "yyyyMMdd_HHmmss") & ".zip", False, True)
    End If
        
finally:

    Sleep (1000)
    messageArrayList.Add Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & processMessage & Format(Now - processStartTime, "hh:mm:ss")
        
    Call sub_InsertActionLog(REPORT_KEYWORD, mCurrentSubProcess, Format(Text_Report_GenerationDate.Value, "yyyyMMdd"), messageArrayList)
   
    Call G_DB.GetRecordset("SELECT top " & G_HistoryDisplay & " * from [_log] " & whereLogClause & " order by updatedatetime desc", G_tempRS)
    Set Log_subform.Form.Recordset = G_tempRS
    
    'Auto Fill for Log_subfrom
    For tempIndex = 0 To Form_MainForm.Log_subform.Form.Controls.Count - 1
        If Not TypeOf Form_MainForm.Log_subform.Form.Controls(tempIndex) Is Label Then
            Form_MainForm.Log_subform.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
        End If
    Next tempIndex
    
    SysCmd acSysCmdUpdateMeter, 100
    SysCmd acSysCmdInitMeter, "[Report] " & Trim(Split(messageArrayList(messageArrayList.Count), " || ")(1)), 100
    DoEvents
        
    Set G_xls = Nothing
    
    EnableALLControls (True)
    
    If Not hideProcessMessage Then
    
        msgBoxArrayList.Add Trim(Split(messageArrayList(messageArrayList.Count), " || ")(1))
        Call showMessageBoxStr(msgBoxArrayList)
        
    End If
    
    SysCmd acSysCmdClearStatus
    DoEvents
    
    Exit Sub
    
errHandle:
    
    MsgBox (Err.Description)
    
    processMessage = "Process Failed - Processing Time : "
    GoTo finally
    
End Sub


Private Sub Combo_Process_Change()

    Dim tempIndex As Integer

    gRS_Process.MoveFirst
    
    Do While Not gRS_Process.EOF
    
        If gRS_Process("Description") = Form_MainForm.Combo_Process.Value Then
            
            mCurrentSubProcess = Mid(gRS_Process("configtype"), 5)
            mLibrary = IIf(IsNull(gRS_Process("configLibrary")), "", gRS_Process("configLibrary"))
            mClass = gRS_Process("configClass")
            
            If Not IsNull(gRS_Process("defaultPath")) Then
                Text_Process_SourcePath.Enabled = True
                Command_Process_Browse_SourcePath.Enabled = True
                CommandOpenProcessSourceFolder.Enabled = True
                Text_Process_SourcePath.Value = IIf(Right(Trim(gRS_Process("defaultPath")), 1) = "\", Trim(gRS_Process("defaultPath")), Trim(gRS_Process("defaultPath")) & "\")
            Else
                Text_Process_SourcePath.Enabled = False
                Command_Process_Browse_SourcePath.Enabled = False
                CommandOpenProcessSourceFolder.Enabled = False
                Text_Process_SourcePath.Value = ""
            End If
            
            
            If Not IsNull(gRS_Process("defaultOutputPath")) Then
                Text_Process_OutputPath.Enabled = True
                Command_Process_Browse_OutputPath.Enabled = True
                CommandOpenProcessOutputFolder.Enabled = True
                Text_Process_OutputPath.Value = IIf(Right(Trim(gRS_Process("defaultOutputPath")), 1) = "\", Trim(gRS_Process("defaultOutputPath")), Trim(gRS_Process("defaultOutputPath")) & "\")
            Else
                Text_Process_OutputPath.Enabled = False
                Command_Process_Browse_OutputPath.Enabled = False
                CommandOpenProcessOutputFolder.Enabled = False
                Text_Process_OutputPath.Value = ""
            End If
            
            If G_DB.fieldExists(gRS_Process, "History_Title") Then
                If IsNull(gRS_Process("History_Title")) Then
                    Label_History.Caption = "Process Histroy"
                Else
                    Label_History.Caption = gRS_Process("History_Title")
                End If
            End If
            
             If G_DB.fieldExists(gRS_Process, "Process_Report_Title") Then
                If IsNull(gRS_Process("Process_Report_Title")) Then
                    TabCtl.Pages(0).Caption = "Main Process"
                Else
                    TabCtl.Pages(0).Caption = gRS_Process("Process_Report_Title")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Process, "Process_Report_Label") Then
                If IsNull(gRS_Process("Process_Report_Label")) Then
                    Label_Process.Caption = "Process"
                Else
                    Label_Process.Caption = gRS_Process("Process_Report_Label")
                End If
            End If
            
            If G_DB.fieldExists(gRS_Process, "GenerationDate_Label") Then
                If IsNull(gRS_Process("GenerationDate_Label")) Then
                    Label_Process_GenerationDate.Caption = "Generation Date"
                Else
                    Label_Process_GenerationDate.Caption = gRS_Process("GenerationDate_Label")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Process, "SourcePath_Label") Then
                If IsNull(gRS_Process("SourcePath_Label")) Then
                    Label_Process_Source_Path.Caption = "Source Path"
                Else
                    Label_Process_Source_Path.Caption = gRS_Process("SourcePath_Label")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Process, "OutputPath_Label") Then
                If IsNull(gRS_Process("OutputPath_Label")) Then
                    Label_Prcoess_Output_Path.Caption = "Output Path"
                Else
                    Label_Prcoess_Output_Path.Caption = gRS_Process("OutputPath_Label")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Process, "Button_Label") Then
                If IsNull(gRS_Process("Button_Label")) Then
                    Command_Process.Caption = "Process"
                Else
                    Command_Process.Caption = gRS_Process("Button_Label")
                End If
            End If
            
            If G_DB.fieldExists(gRS_Process, "PostComboBoxChange") Then
            
                If gRS_Process("PostComboBoxChange") Then
            
                    If Not Run(mClass & "_" & "PostComboBoxChange") Then
                        
                        MsgBox ("Error! " & [mClass] & " : PostComboBoxChange Function. Kindly Check with Support Team")
                        
                    End If
                
                End If
            
            End If
                     
            Call G_DB.GetRecordset("SELECT * FROM [_Import_File] where [Process] = '" & mCurrentSubProcess & "' and type ='IMPORT' and [HiddenFile] = false order by [Seq]", G_tempRS)
            Set Import_File_subForm.Form.Recordset = G_tempRS
            
            'Auto Fill for Import_File_subForm
            For tempIndex = 0 To Form_MainForm.Import_File_subForm.Form.Controls.Count - 1
                If Not TypeOf Form_MainForm.Import_File_subForm.Form.Controls(tempIndex) Is Label Then
                    Form_MainForm.Import_File_subForm.Form.Controls(tempIndex).Properties("ColumnWidth") = -2
                End If
            Next tempIndex
            
            Exit Do
            
            
        End If
        
        gRS_Process.MoveNext
        
    Loop

End Sub

Private Sub Combo_Report_Change()
    
    gRS_Report.MoveFirst
    
    Do While Not gRS_Report.EOF
    
        If gRS_Report("Description") = Form_MainForm.Combo_Report.Value Then
            
            mCurrentSubProcess = Mid(gRS_Report("configtype"), 5)
            mLibrary = IIf(IsNull(gRS_Report("configLibrary")), "", gRS_Report("configLibrary"))
            mClass = gRS_Report("configClass")
                      
            
            If Not IsNull(gRS_Report("defaultOutputPath")) Then
                Text_Report_OutputPath.Enabled = True
                Command_Report_Browse_OutputPath.Enabled = True
                CommandOpenReportOutputFolder.Enabled = True
                Text_Report_OutputPath.Value = IIf(Right(Trim(gRS_Report("defaultOutputPath")), 1) = "\", Trim(gRS_Report("defaultOutputPath")), Trim(gRS_Report("defaultOutputPath")) & "\")
            Else
                Text_Report_OutputPath.Enabled = False
                Command_Report_Browse_OutputPath.Enabled = False
                CommandOpenReportOutputFolder.Enabled = False
                Text_Report_OutputPath.Value = ""
            End If
            
            If G_DB.fieldExists(gRS_Report, "History_Title") Then
                If IsNull(gRS_Report("History_Title")) Then
                    Label_History.Caption = "Process Histroy"
                Else
                    Label_History.Caption = gRS_Report("History_Title")
                End If
            End If
            
             If G_DB.fieldExists(gRS_Report, "Process_Report_Title") Then
                If IsNull(gRS_Report("Process_Report_Title")) Then
                    TabCtl.Pages(1).Caption = "Reporting"
                Else
                    TabCtl.Pages(1).Caption = gRS_Report("Process_Report_Title")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Report, "Process_Report_Label") Then
                If IsNull(gRS_Report("Process_Report_Label")) Then
                    Label_Report.Caption = "Report Name"
                Else
                    Label_Report.Caption = gRS_Report("Process_Report_Label")
                End If
            End If
            
            If G_DB.fieldExists(gRS_Report, "GenerationDate_Label") Then
                If IsNull(gRS_Report("GenerationDate_Label")) Then
                    Label_Report_GenerationDate.Caption = "Generation Date"
                Else
                    Label_Report_GenerationDate.Caption = gRS_Report("GenerationDate_Label")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Report, "OutputPath_Label") Then
                If IsNull(gRS_Report("OutputPath_Label")) Then
                    Label_Report_Output_Path.Caption = "Output Path"
                Else
                    Label_Report_Output_Path.Caption = gRS_Report("OutputPath_Label")
                End If
            End If
                        
            If G_DB.fieldExists(gRS_Report, "Button_Label") Then
                If IsNull(gRS_Report("Button_Label")) Then
                    Command_Export.Caption = "Export"
                Else
                    Command_Export.Caption = gRS_Report("Button_Label")
                End If
            End If
            
            If G_DB.fieldExists(gRS_Report, "PostComboBoxChange") Then
            
                If gRS_Report("PostComboBoxChange") Then
            
                    If Not Run(mClass & "_" & "PostComboBoxChange") Then
                        
                        MsgBox ("Error! " & [mClass] & " : PostComboBoxChange Function. Kindly Check with Support Team")
                        
                    End If
                
                End If
            
            End If
            
            Exit Do
            
        End If
        
        gRS_Report.MoveNext
        
    Loop

End Sub

Private Sub dispose()

    On Error Resume Next

    Call releaseDB
   
    G_DB.CloseConnection
    G_DB.ResetRecordset gRS_Lock
    G_DB.ResetRecordset gRS_Config
    G_DB.ResetRecordset gRS_Process
    G_DB.ResetRecordset gRS_Report
    G_DB.ResetRecordset G_tempRS
    
    If isLocalDB Then
        If (Len(Dir(G_DB.DataFile)) > 0) Then
            Kill G_DB.DataFile
        End If
        
    End If
    
    Set G_DB = Nothing
   
    'Remove the progress bar
    SysCmd acSysCmdRemoveMeter
    
    DoCmd.RunCommand acCmdCompileAndSaveAllModules
    
    On Error GoTo 0
End Sub

Private Function ReloadALLModule() As Boolean
    
    Dim configValue As String
    Dim configType As String
    Dim configPath  As String
    Dim confingName As String
    
    Dim rsImportFile As Recordset

On Error GoTo errHandler
    
    'Load Module from _Configuration Table
    gRS_Config.MoveFirst

    Do Until gRS_Config.EOF

        If IsNull(gRS_Config("ConfigType")) Then
            configType = ""
        Else
            configType = gRS_Config("ConfigType")
        End If

        If IsNull(gRS_Config("ConfigLibrary")) Then
            configPath = ""
        Else
            configPath = ModuleFolderStr & gRS_Config("ConfigLibrary")
        End If

        If IsNull(gRS_Config("ConfigClass")) Then
            confingName = ""
        Else
            confingName = gRS_Config("ConfigClass")
        End If

        If configPath <> "" And confingName <> "" Then
            If (Left(configType, 1) = "P" Or Left(configType, 1) = "R") Then
                
                Call unloadModule(confingName)
                
                If loadModule(configPath) = False Then
                    GoTo errHandler
                End If
                
            End If
        End If

        gRS_Config.MoveNext

    Loop
    
    'Load Module from _Import_File Table for Customized Import Logic
    G_DB.GetRecordset "Select distinct [ImportLibrary], [ImportClass] from [_Import_File] where [ImportLibrary] is not null and [ImportClass] is not null", rsImportFile
    
    Do Until rsImportFile.EOF
        Call unloadModule(rsImportFile("ImportClass"))
        
        If loadModule(ModuleFolderStr & rsImportFile("ImportLibrary")) = False Then
            GoTo errHandler
        End If
        
        rsImportFile.MoveNext
    Loop

    G_DB.GetRecordset "Select distinct [ConfigLibrary], [ConfigClass] from [Workflow_Logic] where [ConfigLibrary] is not null and [ConfigClass] is not null", rsImportFile
    
    Do Until rsImportFile.EOF
        Call unloadModule(rsImportFile("ConfigClass"))
        
        If loadModule(ModuleFolderStr & rsImportFile("ConfigLibrary")) = False Then
            GoTo errHandler
        End If

        rsImportFile.MoveNext
    Loop
    
    'Load Link DB Table
    G_DB.GetRecordset "Select distinct [ConfigValue], [ConfigLibrary], [ConfigClass] from [_Configuration] where Left([ConfigType],2) = 'L-' and [ConfigClass] is not null", rsImportFile
    
    Do Until rsImportFile.EOF
    
        If IsNull(rsImportFile("ConfigValue")) Then
            configValue = G_DBPWD
        Else
            configValue = Fn_DeCrypt(rsImportFile("ConfigValue"))
        End If
        
        If IsNull(rsImportFile("ConfigLibrary")) Then
            configPath = G_DBPATH & G_DBNAME
        Else
            configPath = rsImportFile("ConfigLibrary")
        End If
        
        If Not createDBLinkTbl(configPath, rsImportFile("ConfigClass"), configValue) Then
            GoTo errHandler
        End If
       
        rsImportFile.MoveNext
    Loop
    
    ReloadALLModule = True

finally:
    G_DB.ResetRecordset rsImportFile
    Exit Function

errHandler:

    MsgBox ("Reload ALL Module Error! " & vbNewLine & Err.Description)
    ReloadALLModule = False
    G_DB.ResetRecordset rsImportFile
    Application.Quit

End Function

Private Sub Form_Close()

    Call dispose
    
    If ExecutableStr = "Y" Then
        Application.Quit
    End If

End Sub


Private Sub Combo_Process_KeyPress(KeyAscii As Integer)

     KeyAscii = 0

End Sub

Private Sub Combo_Report_KeyPress(KeyAscii As Integer)

     KeyAscii = 0

End Sub

Private Sub Command_Exit_Click()

    On Error Resume Next
    DoCmd.Close acForm, "MainForm"
    On Error GoTo 0
End Sub

Private Sub Command_Process_Browse_SourcePath_Click()

    Dim tempStr As String
    Dim fldr As FileDialog
    
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)

    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = IIf(IsNull(Text_Process_SourcePath.Value), "", Text_Process_SourcePath.Value)
        If .Show <> -1 Then GoTo NextCode
        tempStr = .SelectedItems(1)
    End With
    
NextCode:

    If tempStr <> "" Then
        Text_Process_SourcePath.Value = IIf(Right(Trim(tempStr), 1) = "\", Trim(tempStr), Trim(tempStr) & "\")
    End If

    Set fldr = Nothing


End Sub

Private Sub Command_Process_Browse_OutputPath_Click()

    Dim tempStr As String
    Dim fldr As FileDialog
    
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)

    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = IIf(IsNull(Text_Process_OutputPath.Value), "", Text_Process_OutputPath.Value)
        If .Show <> -1 Then GoTo NextCode
        tempStr = .SelectedItems(1)
    End With
    
NextCode:

    If tempStr <> "" Then
        Text_Process_OutputPath.Value = IIf(Right(Trim(tempStr), 1) = "\", Trim(tempStr), Trim(tempStr) & "\")
    End If

    Set fldr = Nothing
    
End Sub

Private Sub Command_Report_Browse_OutputPath_Click()

    Dim tempStr As String
    Dim fldr As FileDialog
    
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)

    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = Text_Report_OutputPath
        If .Show <> -1 Then GoTo NextCode
        tempStr = .SelectedItems(1)
    End With
    
NextCode:

    If tempStr <> "" Then
        Text_Report_OutputPath.Value = IIf(Right(Trim(tempStr), 1) = "\", Trim(tempStr), Trim(tempStr) & "\")
    End If

    Set fldr = Nothing
    
End Sub

Private Sub Command_Process_KeyDown(KeyCode As Integer, Shift As Integer)
    
    If KeyCode = 9 Then
        If TabCtl.Pages(1).Visible = True Then
            TabCtl.Pages(1).SetFocus
        Else
            Command_Exit.SetFocus
        End If
    End If
    
End Sub


Private Sub Command_Exit_KeyDown(KeyCode As Integer, Shift As Integer)
    
    If KeyCode = 9 Then
        If TabCtl.Pages(0).Visible = True Then
            TabCtl.Pages(0).SetFocus
        Else
            TabCtl.Pages(1).SetFocus
        End If
    End If
    
End Sub


Private Sub Command_Export_KeyDown(KeyCode As Integer, Shift As Integer)
    
    If KeyCode = 9 Then
        Command_Exit.SetFocus
    End If
    
End Sub

Private Sub SetALLControls()

        Me.Command_Process.Enabled = True
        Me.Text_Process_SourcePath.Enabled = True
        Me.Text_Process_OutputPath.Enabled = True
        Me.Combo_Process.Enabled = True
        Me.Combo_Report.Enabled = True
        Me.Text_Process_GenerationDate.Enabled = True
        Me.Text_Report_GenerationDate.Enabled = True
        Me.Command_Process_Browse_SourcePath.Enabled = True
        Me.Command_Process_Browse_OutputPath.Enabled = True
        
        Me.Text_Report_OutputPath.Enabled = True
        Me.Command_Report_Browse_OutputPath.Enabled = True
        Me.Command_Export.Enabled = True
        
        Me.CommandOpenProcessSourceFolder.Enabled = True
        Me.CommandOpenProcessOutputFolder.Enabled = True
        Me.CommandOpenReportOutputFolder.Enabled = True
        
        Me.Command_Exit.Enabled = True
End Sub

Private Sub EnableALLControls(ByVal enable As Boolean)

    If enable = False Then

        'Save existing Config of GUI control
        btnProcessEnabled = Me.Command_Process.Enabled
        txtPathEnabled = Me.Text_Process_SourcePath.Enabled
        txtOutputPathEnabled = Me.Text_Process_OutputPath.Enabled
        cboProcessEnabled = Me.Combo_Process.Enabled
        cboRportEnabled = Me.Combo_Report.Enabled
        dtpProcessDateEnabled = Me.Text_Process_GenerationDate.Enabled
        dtpReportDateEnabled = Me.Text_Report_GenerationDate.Enabled
        btnBrowseEnabled = Me.Command_Process_Browse_SourcePath.Enabled
        btnOutputBrowseEnabled = Me.Command_Process_Browse_OutputPath.Enabled
        txtRptOutputPathEnabled = Me.Text_Report_OutputPath.Enabled
        btnRptOutputBrowseEnabled = Me.Command_Report_Browse_OutputPath.Enabled
        btnExportEnabled = Me.Command_Export.Enabled
        
        btnCommandOpenProcessSourceFolderEnabled = Me.CommandOpenProcessSourceFolder.Enabled
        btnCommandOpenProcessOutputFolderEnabled = Me.CommandOpenProcessOutputFolder.Enabled
        btnCommandOpenReportOutputFolderEnabled = Me.CommandOpenReportOutputFolder.Enabled
        
        'Set All Control to False
        Me.Command_Process.Enabled = False
        Me.Text_Process_SourcePath.Enabled = False
        Me.Text_Process_OutputPath.Enabled = False
        Me.Combo_Process.Enabled = False
        Me.Combo_Report.Enabled = False
        Me.Text_Process_GenerationDate.Enabled = False
        Me.Text_Report_GenerationDate.Enabled = False
        Me.Command_Process_Browse_SourcePath.Enabled = False
        Me.Command_Process_Browse_OutputPath.Enabled = False
        Me.Text_Report_OutputPath.Enabled = False
        Me.Command_Report_Browse_OutputPath.Enabled = False
        Me.Command_Export.Enabled = False
        
        Me.CommandOpenProcessSourceFolder.Enabled = False
        Me.CommandOpenProcessOutputFolder.Enabled = False
        Me.CommandOpenReportOutputFolder.Enabled = False

        Me.Command_Exit.Enabled = False

    Else

        'Restore previous Config of GUI control
        Me.Command_Process.Enabled = btnProcessEnabled
        Me.Text_Process_SourcePath.Enabled = txtPathEnabled
        Me.Text_Process_OutputPath.Enabled = txtOutputPathEnabled
        Me.Combo_Process.Enabled = cboProcessEnabled
        Me.Combo_Report.Enabled = cboRportEnabled
        Me.Text_Process_GenerationDate.Enabled = dtpProcessDateEnabled
        Me.Text_Report_GenerationDate.Enabled = dtpReportDateEnabled
        Me.Command_Process_Browse_SourcePath.Enabled = btnBrowseEnabled
        Me.Command_Process_Browse_OutputPath.Enabled = btnOutputBrowseEnabled
        Me.Text_Report_OutputPath.Enabled = txtRptOutputPathEnabled
        Me.Command_Report_Browse_OutputPath.Enabled = btnRptOutputBrowseEnabled
        Me.Command_Export.Enabled = btnExportEnabled
        
        Me.CommandOpenProcessSourceFolder.Enabled = btnCommandOpenProcessSourceFolderEnabled
        Me.CommandOpenProcessOutputFolder.Enabled = btnCommandOpenProcessOutputFolderEnabled
        Me.CommandOpenReportOutputFolder.Enabled = btnCommandOpenReportOutputFolderEnabled

        Me.Command_Exit.Enabled = True

    End If

End Sub


   Private Sub lockDB()

        G_DB.ExecuteSQL ("Insert into [_Main_lock] ([Userid], [Datetime]) values('" & G_USER.Userid & "', Now )")

    End Sub

    Private Sub releaseDB()

        G_DB.ExecuteSQL ("Delete * from [_Main_lock] where [Userid] = '" & G_USER.Userid & "'")

    End Sub

    Private Sub clearDB()

        G_DB.ExecuteSQL ("Delete * from [_Main_lock]")

    End Sub

    Private Sub lockProcGrpDB(ByVal ProcessLockGroup As String)

        G_DB.ExecuteSQL ("Insert into [_Main_lock] ([Userid], [Datetime], [ProcessLockGroup]) values('" & G_USER.Userid & "', Now, '" & ProcessLockGroup & "')")

    End Sub

    Private Sub releaseProcGrpDB(ByVal ProcessLockGroup As String)

        G_DB.ExecuteSQL ("Delete * from [_Main_lock] where [Userid] = '" & G_USER.Userid & "' and [ProcessLockGroup] = '" & ProcessLockGroup & "'")

    End Sub

    Private Sub clearProcGrpDB(ByVal ProcessLockGroup As String)

        G_DB.ExecuteSQL ("Delete * from [_Main_lock] where [ProcessLockGroup] = '" & ProcessLockGroup & "'")

    End Sub

    Private Sub showMessageBoxStr(ByVal msgList As Collection)
    
        Dim tempMsgStr As String
        Dim tempStr As String
        Dim i As Integer
        
        For i = 1 To msgList.Count
            
            tempStr = "[" & i & "] " & msgList(i) & vbNewLine & vbNewLine
            
            If Len(tempMsgStr) + Len(tempStr) > 1024 Then
                MsgBox (tempMsgStr)
                tempMsgStr = tempStr
            Else
                tempMsgStr = tempMsgStr & tempStr
            End If
        Next
        
        If tempMsgStr <> "" Then
            MsgBox (tempMsgStr)
        End If
        
    End Sub

