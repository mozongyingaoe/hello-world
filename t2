_Common_Module.bas
Attribute VB_Name = "_Common_Module"
Option Compare Database
Option Explicit

Public Function Fn_EnCrypt(ByVal aInStr As String) As String
    
    Dim tempIndex As Integer

    Fn_EnCrypt = ""

    For tempIndex = 0 To Len(aInStr) - 1
        Fn_EnCrypt = Fn_EnCrypt & Chr(Asc(Mid(aInStr, tempIndex + 1, 1)) + tempIndex + 1)
    Next
    
End Function
    
Public Function Fn_DeCrypt(ByVal aInStr As String) As String
    
    Dim tempIndex As Integer

    Fn_DeCrypt = ""

    For tempIndex = 0 To Len(aInStr) - 1
        Fn_DeCrypt = Fn_DeCrypt & Chr(Asc(Mid(aInStr, tempIndex + 1, 1)) - tempIndex - 1)
    Next
    
End Function


Public Function getStringFromINI(ByVal Key_1 As String, ByVal Key_2 As String, ByVal ini_path As String) As String
    
    Dim strBuff As String * G_INIBufferSize
    Dim intLen As Integer
    
    intLen = GetPrivateProfileString(Key_1, Key_2, vbNullString, strBuff, G_INIBufferSize, ini_path)
    getStringFromINI = Left(strBuff, intLen)
    
End Function

Public Function loadModule(ByVal aModulePath As String) As Boolean

On Error GoTo loadModuleErr
    
    loadModule = True
    
    VBE.VBProjects("GenericMain").VBComponents.Import aModulePath
    DoCmd.RunCommand acCmdCompileAndSaveAllModules
    
    Exit Function

loadModuleErr:

    MsgBox ("Load Module Error! " & vbNewLine & Err.Description)
    loadModule = False

End Function
    
Public Function unloadModule(ByVal aModelName As String) As Boolean
    
On Error Resume Next
    VBE.VBProjects("GenericMain").VBComponents.Remove VBE.VBProjects("GenericMain").VBComponents(aModelName)
    DoCmd.RunCommand acCmdCompileAndSaveAllModules
On Error GoTo 0
    
End Function

Public Function deleteObject(ByVal ObjectType As String, ByVal objectName As String)

On Error Resume Next
    If ObjectType = "acForm" Then
        DoCmd.deleteObject acForm, objectName
    ElseIf ObjectType = "acModule" Then
        DoCmd.deleteObject acModule, objectName
    ElseIf ObjectType = "acTable" Then
        DoCmd.deleteObject acTable, objectName
    Else
    End If
On Error GoTo 0
    
End Function

Public Function importObject(ByVal ObjectType As String, ByVal fromObjectName As String, ByVal toObjectName As String, ByVal path As String)

On Error GoTo importObjectErr
    If ObjectType = "acForm" Then
        DoCmd.TransferDatabase acImport, "Microsoft Access", path, acForm, fromObjectName, toObjectName
    ElseIf ObjectType = "acModule" Then
        DoCmd.TransferDatabase acImport, "Microsoft Access", path, acModule, fromObjectName, toObjectName
    ElseIf ObjectType = "acTable" Then
        DoCmd.TransferDatabase acImport, "Microsoft Access", path, acTable, fromObjectName, toObjectName
    Else
    End If
    
    Exit Function

importObjectErr:
    MsgBox (Err.Description)
        
End Function

Public Function SaveAsText(ByVal ObjectType As String, ByVal objectName As String, ByVal path As String)

    If ObjectType = "acForm" Then
        Application.SaveAsText acForm, objectName, path
    ElseIf ObjectType = "acModule" Then
        Application.SaveAsText acModule, objectName, path
    ElseIf ObjectType = "acTable" Then
        Application.SaveAsText acTable, objectName, path
    Else
    End If
    
End Function

Public Function LoadFromText(ByVal ObjectType As String, ByVal objectName As String, ByVal path As String) As Boolean

On Error GoTo LoadFromTextErr

    LoadFromText = True

     If ObjectType = "acForm" Then
            Application.LoadFromText acForm, objectName, path
        ElseIf ObjectType = "acModule" Then
            Application.LoadFromText acModule, objectName, path
        ElseIf ObjectType = "acTable" Then
            Application.LoadFromText acTable, objectName, path
        Else
    End If

    DoCmd.RunCommand acCmdCompileAndSaveAllModules
    
    Exit Function
     
LoadFromTextErr:

    MsgBox ("Load From Text Error! " & vbNewLine & Err.Description)
    LoadFromText = False

End Function

Public Function itemExistsInCollection(ByVal itemList As Collection, ByVal key As String) As Boolean

On Error Resume Next

'    itemList.Item key
'    itemExistsInCollection = (Err.Number = 0)

    Dim item As Variant
    
    itemExistsInCollection = False

    For Each item In itemList
        If item = key Then
            itemExistsInCollection = True
            Exit Function
        End If
    Next

On Error GoTo 0
    
End Function

Public Sub sub_InsertActionLog(ByVal aProcess As String, ByVal aSubProcess As String, ByVal aGenerationdate As String, ByVal messageArrayList As Collection)

    Dim tempIndex As Integer
    
    Dim tempDateStr As String
    Dim aLogMsg As String
    
    Dim tempStrArray() As String
    Dim tempStr As String
   
    For tempIndex = 1 To messageArrayList.Count
        
        tempStrArray = Split(messageArrayList(tempIndex), "||")
        
        If UBound(tempStrArray) = 1 Then
            tempDateStr = Trim(tempStrArray(0))
            aLogMsg = Trim(tempStrArray(1))
        Else
            aLogMsg = Trim(tempStrArray(0))
        End If
        
        tempStr = "Insert Into _Log Values('" & G_USERID & " - " & G_USERNAME & "',#" & tempDateStr & "#,'" & aProcess & "','" & aSubProcess & "'," & aGenerationdate & ",'" & Replace(aLogMsg, "'", "''") & "')"
        Call G_DB.ExecuteSQL(tempStr)
    Next
    
End Sub


Public Function FileIsExists(ByVal fileName As String) As Boolean
   
   Dim FSO As Object
   
   Set FSO = CreateObject("Scripting.FileSystemObject")
   FileIsExists = FSO.FileExists(fileName)
   
   Set FSO = Nothing
   
End Function

Public Function FileWithExtention(ByVal fileFullPath As String) As String
   
   FileWithExtention = Right(fileFullPath, Len(fileFullPath) - InStrRev(fileFullPath, "\"))
   
End Function

Public Function FileExtention(ByVal fileName As String) As String
   
   Dim FSO As Object
   
   Set FSO = CreateObject("Scripting.FileSystemObject")
   FileExtention = FSO.GetExtensionName(fileName)
   
   Set FSO = Nothing
   
End Function


Public Function FileDrive(ByVal fileName As String) As String
   
   Dim FSO As Object
   
   Set FSO = CreateObject("Scripting.FileSystemObject")
   FileDrive = FSO.GetDrive(FSO.GetDriveName(fileName))
   
   Set FSO = Nothing
    
End Function

Public Function FileDirectory(ByVal fileName As String)
   
   Dim FSO As Object
   
   Set FSO = CreateObject("Scripting.FileSystemObject")
    FileDirectory = FSO.GetParentFolderName(fileName)
   
   Set FSO = Nothing
   
End Function

Public Function CreateFolder(ByVal folderPath As String) As Boolean
    
On Error GoTo errHandle

    Dim tempStr As String
    Dim tempVar As Variant
    
    tempStr = ""

    If Left(folderPath, 2) = "\\" Then
        tempStr = folderPath
    Else
        For Each tempVar In Split(folderPath, "\")
            If tempStr = "" Then
                tempStr = tempVar
            Else
                tempStr = tempStr & "\" & tempVar
            End If
        Next
    End If

    If Len(Dir(tempStr, vbDirectory)) = 0 Then
        MkDir tempStr
    End If

    CreateFolder = True
    
finally:
    Exit Function
    
errHandle:
    CreateFolder = False
    GoTo finally

End Function

Sub RemoveFolder(ByVal folderPath As String)

    Dim FSO As Object

    Set FSO = CreateObject("scripting.filesystemobject")

        If Right(folderPath, 1) = "\" Then
            folderPath = Left(folderPath, Len(folderPath) - 1)
        End If
    
        If FSO.FolderExists(folderPath) = False Then
            Exit Sub
        End If

    On Error Resume Next
    
    FSO.deletefolder folderPath, True
    On Error GoTo 0

End Sub

Function GetFileList(FileSpec As String) As Variant

    Dim FileArray() As Variant
    Dim FileCount As Integer
    Dim fileName As String
    
On Error GoTo NoFilesFound

    FileCount = 0
    fileName = Dir(FileSpec)
    If fileName = "" Then GoTo NoFilesFound
    
'   Loop until no more matching files are found
    Do While fileName <> ""
        FileCount = FileCount + 1
        ReDim Preserve FileArray(1 To FileCount)
        FileArray(FileCount) = fileName
        fileName = Dir()
    Loop
    
    GetFileList = FileArray
    Exit Function

'   Error handler
NoFilesFound:
    GetFileList = False
    
End Function

Public Sub getRecordSetRow(ByVal rs As Recordset, ByRef rsRow As Collection)
  
    Dim tempIndex As Integer
    
    For tempIndex = 0 To rs.Fields.Count - 1
         rsRow.Add rs.Fields(tempIndex).Value, rs.Fields(tempIndex).Name
    Next
    
    Exit Sub
    
End Sub

Public Function removeQuotes(ByVal strVal As String) As String

    If Len(strVal) = 0 Then
        removeQuotes = ""
    ElseIf strVal = "" Then
        removeQuotes = ""
    ElseIf strVal = """""" Then
        removeQuotes = ""
    ElseIf Left(strVal, 1) = """" And Right(strVal, 1) = """" Then
        removeQuotes = Replace(strVal, """""", """")
        removeQuotes = Mid(removeQuotes, 2, Len(removeQuotes) - 2)
    Else
        removeQuotes = Replace(strVal, """""", """")
    End If

End Function


Public Function createDBLinkTbl(DBPath As String, TblName As String, Optional DBPwd As String = "") As Boolean

On Error Resume Next

    Dim tempVar As Variant
    
    For Each tempVar In CurrentDb.TableDefs
        If tempVar.Name = TblName Then
            DoCmd.deleteObject acTable, TblName
            Exit For
        End If
    Next tempVar
   
On Error GoTo createDBLinkTblErr

    Set tempVar = CurrentDb.CreateTableDef(TblName)

    With tempVar
   
        If DBPwd = "" Then
            .Connect = "MS Access;DATABASE=" & DBPath
        Else
            .Connect = "MS Access;PWD=" & DBPwd & ";DATABASE=" & DBPath
        End If
        
        .SourceTableName = TblName
        
    End With

    CurrentDb.TableDefs.Append tempVar
    
    createDBLinkTbl = True
    
finally:
    Exit Function

createDBLinkTblErr:
    MsgBox (Err.Description)
    createDBLinkTbl = False
    GoTo finally

End Function

Public Function DateTimeParse(ByVal dateStr As String, ByVal dateFormat As String) As Variant

'd[1-2]*[-,/]M[1-4]*[-,/]y[2,4]*
'M[1-4]*[-,/]d[1-2]*[-,/]y[2,4]*
'y[2,4]*[-,/]d[1-2]*[-,/]M[1-4]*
'y[2,4]*[-,/]M[1-4]*[-,/]d[1-2]*

    Dim tempStr As String
    
    Dim dateFormatArray() As String
    
    Dim dayFormatStr As String
    Dim monthFormatStr As String
    Dim yearFormatStr As String
    
    Dim dayFormatInt As Integer
    Dim monthFormatInt As Integer
    Dim yearFormatInt As Integer
    
    Dim numYear As Integer
    Dim numMonth As Integer

On Error GoTo DateTimeParseErr


    If InStr(dateFormat, "/") > 0 Then
         dateFormatArray = Split(dateStr, "/")
    ElseIf InStr(dateFormat, "-") > 0 Then
         dateFormatArray = Split(dateStr, "-")
    Else
        'Not support for Non Separator (-,/) date format
        GoTo DateTimeParseErr
    End If
    
    numYear = Len(dateFormat) - Len(Replace(dateFormat, "y", ""))
    numMonth = Len(dateFormat) - Len(Replace(dateFormat, "M", ""))
   
                    
    If UBound(dateFormatArray) = 2 Then

        'y*M
        If Left(dateFormat, 1) = "y" And Right(dateFormat, 1) = "M" Then
            yearFormatStr = dateFormatArray(0)
            dayFormatStr = dateFormatArray(1)
            monthFormatStr = dateFormatArray(2)
        'y*d
        ElseIf Left(dateFormat, 1) = "y" And Right(dateFormat, 1) = "d" Then
            yearFormatStr = dateFormatArray(0)
            dayFormatStr = dateFormatArray(2)
            monthFormatStr = dateFormatArray(1)
        'M*y
        ElseIf Left(dateFormat, 1) = "M" And Right(dateFormat, 1) = "y" Then
            yearFormatStr = dateFormatArray(2)
            dayFormatStr = dateFormatArray(1)
            monthFormatStr = dateFormatArray(0)
        'd*y
        ElseIf Left(dateFormat, 1) = "d" And Right(dateFormat, 1) = "y" Then
            yearFormatStr = dateFormatArray(2)
            dayFormatStr = dateFormatArray(0)
            monthFormatStr = dateFormatArray(1)
        End If

    Else
        'Invalid Date format
        GoTo DateTimeParseErr
        
    End If
        
    
    If numYear = 4 Then
        yearFormatInt = CInt(yearFormatStr)
    Else
        yearFormatInt = CInt(yearFormatStr) + 2000
    End If
    
    If numMonth > 2 Then
        monthFormatInt = Month(DateValue("01-" & monthFormatStr & "-1900"))
    Else
        monthFormatInt = CInt(monthFormatStr)
    End If
           
    dayFormatInt = CInt(dayFormatStr)
                
    DateTimeParse = DateSerial(yearFormatInt, monthFormatInt, dayFormatInt)
   
finally:

    Exit Function

DateTimeParseErr:
    
    DateTimeParse = False
    tempStr = "[DateTimeParse Error] Date String : " & dateStr & ", Date Format :" & dateFormat
    msgBoxArrayList.Add (tempStr)
    messageArrayList.Add (Format(Now, "yyyy-MM-dd hh:mm:ss AM/PM") & " || " & tempStr)
    
    GoTo finally

End Function



