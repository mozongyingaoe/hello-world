clsExcelHelper.cls
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsExcelHelper"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private Declare Function GetWindowThreadProcessId Lib "user32" (ByVal hWnd As Long, ByRef lpdwProcessId As Long) As Long

Const xlExcel8 = 56
Const xlOpenXMLWorkbook = 51
Const xlCSV = 6

Public xlsApp As Excel.Application
Public disposing As Boolean
Public ProcIdXL As Long


Private Sub Class_Initialize()

    Dim xlHWND As Long
    
    ProcIdXL = 0
    disposing = False
    
    If xlsApp Is Nothing Then
        Set xlsApp = New Excel.Application
    End If
    
    xlHWND = xlsApp.hWnd
    Call GetWindowThreadProcessId(xlHWND, ProcIdXL)
    
    
End Sub

Private Sub Class_Terminate()

    Dim WshShell As Object
        
    If disposing Then
        Exit Sub
    End If

    disposing = True

    If Not xlsApp Is Nothing Then
        
        xlsApp.Visible = False
        xlsApp.DisplayAlerts = False
        xlsApp.Quit
            
        Set xlsApp = Nothing
        
    End If
   
On Error GoTo errHandle
    
    Set WshShell = CreateObject("WScript.Shell")

    'Shell Kill task
    Call WshShell.Run("taskkill /F /PID " & CStr(ProcIdXL), 0, False)

errHandle:
   
End Sub



Public Sub SaveAsWorkbook(ByRef wb As Workbook, ByVal saveAsFile As String)

On Error GoTo errHandle

Dim t As Boolean


    t = wb.Application.DisplayAlerts
    
    wb.Application.DisplayAlerts = False
    
    SetICRestricted wb 'Apply IC Setting in the Excel file properties
    
    wb.CheckCompatibility = False
    

    If UCase(FileExtention(saveAsFile)) = "XLS" Then
        wb.SaveAs fileName:=saveAsFile, FileFormat:=xlExcel8
    ElseIf UCase(FileExtention(saveAsFile)) = "XLSX" Then
        wb.SaveAs fileName:=saveAsFile, FileFormat:=xlOpenXMLWorkbook
    Else
        wb.SaveAs fileName:=saveAsFile, FileFormat:=xlOpenXMLWorkbook
    End If
    
    
    wb.Application.DisplayAlerts = t
    
    Exit Sub
    
errHandle:

    wb.SaveAs fileName:=saveAsFile ', FileFormat:=xlExcel9795
    wb.Application.DisplayAlerts = t
    
End Sub

Public Sub SaveAsCsv(ByRef wb As Workbook, ByVal saveAsFile As String)

On Error GoTo errHandle

Dim t As Boolean

    t = wb.Application.DisplayAlerts
    
    wb.Application.DisplayAlerts = False
    
    SetICRestricted wb 'Apply IC Setting in the Excel file properties
    
    wb.CheckCompatibility = False
    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlCSV   'Use this in Win 7
    wb.Application.DisplayAlerts = t
    
    Exit Sub
    
errHandle:

    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlCSV
    wb.Application.DisplayAlerts = t
    
End Sub

'20170724 v1.1 Freddie Y F Chan [START]
Public Sub SaveAsXlUnicodeText(ByRef wb As Workbook, ByVal saveAsFile As String)

On Error GoTo errHandle

Dim t As Boolean

    t = wb.Application.DisplayAlerts
    
    wb.Application.DisplayAlerts = False
    
    SetICRestricted wb 'Apply IC Setting in the Excel file properties
    
    wb.CheckCompatibility = False
    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlUnicodeText   'Use this in Win 7
    wb.Application.DisplayAlerts = t
    
    Exit Sub
    
errHandle:

    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlUnicodeText ', FileFormat:=xlText
    wb.Application.DisplayAlerts = t
    
End Sub
'20170724 v1.1 Freddie Y F Chan [END]

Public Sub SaveAsTxt(ByRef wb As Workbook, ByVal saveAsFile As String)

On Error GoTo errHandle

Dim t As Boolean

    t = wb.Application.DisplayAlerts
    
    wb.Application.DisplayAlerts = False
    
    SetICRestricted wb 'Apply IC Setting in the Excel file properties
    
    wb.CheckCompatibility = False
    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlText   'Use this in Win 7
    wb.Application.DisplayAlerts = t
    
    Exit Sub
    
errHandle:

    wb.SaveAs fileName:=saveAsFile, FileFormat:=xlText ', FileFormat:=xlText
    wb.Application.DisplayAlerts = t
    
End Sub


Sub SetICRestricted(ByVal wb As Workbook)

On Error GoTo DoAdd


If wb.CustomDocumentProperties.item("DocClassification").Value <> "" Then
    Exit Sub
End If

DoAdd:

    With wb.CustomDocumentProperties
        .Add Name:="Source", LinkToContent:=False, Value:="Internal", Type:=4
        .Add Name:="Footers", LinkToContent:=False, Value:="Footers", Type:=4
        .Add Name:="DocClassification", LinkToContent:=False, Value:="CLARESTRI", Type:=4
        .Add Name:="Classification", LinkToContent:=False, Value:="RESTRICTED", Type:=4
    End With

End Sub


Public Sub PutRecordsetToExcelRange(ByRef rs As ADOdb.Recordset, ByRef target As Excel.Range, Optional ByVal hasHeader As Boolean = False, Optional ByVal shiftDown As Boolean = True)
        
    Dim r As Long
    Dim c As Long

    Dim colTarget As Excel.Range

    r = target.Row
    c = target.Column

    Set colTarget = target
    
'20170724 v1.1 Freddie Y F Chan [START]
    target.Worksheet.Select
'20170724 v1.1 Freddie Y F Chan [END]
    
    target.Select

    'Print Header
    If hasHeader Then

    Dim counter As Long
        For counter = 0 To rs.Fields.Count - 1
            colTarget.Value = rs.Fields(counter).Name
            Set colTarget = colTarget.Offset(0, 1)
        Next

        Set target = target.Offset(1, 0)

    End If

    If shiftDown Then
        If rs.RecordCount > 1 Then
            Call target.Offset(1, 0).EntireRow.Resize(RowSize:=(rs.RecordCount - 1)).Insert(Shift:=Excel.XlInsertShiftDirection.xlShiftDown)
        End If
    End If

    target.CopyFromRecordset rs

    End Sub

    
Public Function WorksheetExists(ByVal wb As Excel.Workbook, ByVal WorksheetName As String) As Boolean

    On Error Resume Next
        WorksheetExists = (wb.Worksheets(WorksheetName).Name <> "")
    On Error GoTo 0

End Function





